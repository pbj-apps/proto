// source: heyrenee/v1/diagnosis_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var heyrenee_v1_messages_patient_diagnosis_pb = require('../../heyrenee/v1/messages/patient_diagnosis_pb.js');
goog.object.extend(proto, heyrenee_v1_messages_patient_diagnosis_pb);
var heyrenee_v1_options_auth_pb = require('../../heyrenee/v1/options/auth_pb.js');
goog.object.extend(proto, heyrenee_v1_options_auth_pb);
goog.exportSymbol('proto.heyrenee.v1.CreatePatientDiagnosisRequest', null, global);
goog.exportSymbol('proto.heyrenee.v1.DiagnosisSuggestRequest', null, global);
goog.exportSymbol('proto.heyrenee.v1.DiagnosisSuggestResponse', null, global);
goog.exportSymbol('proto.heyrenee.v1.DiagnosisSuggestion', null, global);
goog.exportSymbol('proto.heyrenee.v1.ListPatientDiagnosesRequest', null, global);
goog.exportSymbol('proto.heyrenee.v1.ListPatientDiagnosesResponse', null, global);
goog.exportSymbol('proto.heyrenee.v1.UpdatePatientDiagnosisRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.DiagnosisSuggestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.heyrenee.v1.DiagnosisSuggestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.DiagnosisSuggestRequest.displayName = 'proto.heyrenee.v1.DiagnosisSuggestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.DiagnosisSuggestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.heyrenee.v1.DiagnosisSuggestResponse.repeatedFields_, null);
};
goog.inherits(proto.heyrenee.v1.DiagnosisSuggestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.DiagnosisSuggestResponse.displayName = 'proto.heyrenee.v1.DiagnosisSuggestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.DiagnosisSuggestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.heyrenee.v1.DiagnosisSuggestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.DiagnosisSuggestion.displayName = 'proto.heyrenee.v1.DiagnosisSuggestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.heyrenee.v1.CreatePatientDiagnosisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.CreatePatientDiagnosisRequest.displayName = 'proto.heyrenee.v1.CreatePatientDiagnosisRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.heyrenee.v1.UpdatePatientDiagnosisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.UpdatePatientDiagnosisRequest.displayName = 'proto.heyrenee.v1.UpdatePatientDiagnosisRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.heyrenee.v1.ListPatientDiagnosesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.ListPatientDiagnosesRequest.displayName = 'proto.heyrenee.v1.ListPatientDiagnosesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.heyrenee.v1.ListPatientDiagnosesResponse.repeatedFields_, null);
};
goog.inherits(proto.heyrenee.v1.ListPatientDiagnosesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.heyrenee.v1.ListPatientDiagnosesResponse.displayName = 'proto.heyrenee.v1.ListPatientDiagnosesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.DiagnosisSuggestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.DiagnosisSuggestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    partialText: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestRequest}
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.DiagnosisSuggestRequest;
  return proto.heyrenee.v1.DiagnosisSuggestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.DiagnosisSuggestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestRequest}
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartialText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.DiagnosisSuggestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.DiagnosisSuggestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartialText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string partial_text = 1;
 * @return {string}
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.prototype.getPartialText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.heyrenee.v1.DiagnosisSuggestRequest} returns this
 */
proto.heyrenee.v1.DiagnosisSuggestRequest.prototype.setPartialText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.DiagnosisSuggestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.DiagnosisSuggestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagnosisSuggestionsList: jspb.Message.toObjectList(msg.getDiagnosisSuggestionsList(),
    proto.heyrenee.v1.DiagnosisSuggestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestResponse}
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.DiagnosisSuggestResponse;
  return proto.heyrenee.v1.DiagnosisSuggestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.DiagnosisSuggestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestResponse}
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.heyrenee.v1.DiagnosisSuggestion;
      reader.readMessage(value,proto.heyrenee.v1.DiagnosisSuggestion.deserializeBinaryFromReader);
      msg.addDiagnosisSuggestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.DiagnosisSuggestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.DiagnosisSuggestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagnosisSuggestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.heyrenee.v1.DiagnosisSuggestion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DiagnosisSuggestion diagnosis_suggestions = 1;
 * @return {!Array<!proto.heyrenee.v1.DiagnosisSuggestion>}
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.prototype.getDiagnosisSuggestionsList = function() {
  return /** @type{!Array<!proto.heyrenee.v1.DiagnosisSuggestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.heyrenee.v1.DiagnosisSuggestion, 1));
};


/**
 * @param {!Array<!proto.heyrenee.v1.DiagnosisSuggestion>} value
 * @return {!proto.heyrenee.v1.DiagnosisSuggestResponse} returns this
*/
proto.heyrenee.v1.DiagnosisSuggestResponse.prototype.setDiagnosisSuggestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.heyrenee.v1.DiagnosisSuggestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.heyrenee.v1.DiagnosisSuggestion}
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.prototype.addDiagnosisSuggestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.heyrenee.v1.DiagnosisSuggestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestResponse} returns this
 */
proto.heyrenee.v1.DiagnosisSuggestResponse.prototype.clearDiagnosisSuggestionsList = function() {
  return this.setDiagnosisSuggestionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.DiagnosisSuggestion.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.DiagnosisSuggestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.DiagnosisSuggestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.DiagnosisSuggestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagnosisId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestion}
 */
proto.heyrenee.v1.DiagnosisSuggestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.DiagnosisSuggestion;
  return proto.heyrenee.v1.DiagnosisSuggestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.DiagnosisSuggestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.DiagnosisSuggestion}
 */
proto.heyrenee.v1.DiagnosisSuggestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiagnosisId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.DiagnosisSuggestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.DiagnosisSuggestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.DiagnosisSuggestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.DiagnosisSuggestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagnosisId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string diagnosis_id = 1;
 * @return {string}
 */
proto.heyrenee.v1.DiagnosisSuggestion.prototype.getDiagnosisId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.heyrenee.v1.DiagnosisSuggestion} returns this
 */
proto.heyrenee.v1.DiagnosisSuggestion.prototype.setDiagnosisId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.heyrenee.v1.DiagnosisSuggestion.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.heyrenee.v1.DiagnosisSuggestion} returns this
 */
proto.heyrenee.v1.DiagnosisSuggestion.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.CreatePatientDiagnosisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.CreatePatientDiagnosisRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientDiagnosis: (f = msg.getPatientDiagnosis()) && heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.CreatePatientDiagnosisRequest}
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.CreatePatientDiagnosisRequest;
  return proto.heyrenee.v1.CreatePatientDiagnosisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.CreatePatientDiagnosisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.CreatePatientDiagnosisRequest}
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis;
      reader.readMessage(value,heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.deserializeBinaryFromReader);
      msg.setPatientDiagnosis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.CreatePatientDiagnosisRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.CreatePatientDiagnosisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientDiagnosis();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.serializeBinaryToWriter
    );
  }
};


/**
 * optional messages.PatientDiagnosis patient_diagnosis = 1;
 * @return {?proto.heyrenee.v1.messages.PatientDiagnosis}
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.prototype.getPatientDiagnosis = function() {
  return /** @type{?proto.heyrenee.v1.messages.PatientDiagnosis} */ (
    jspb.Message.getWrapperField(this, heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis, 1));
};


/**
 * @param {?proto.heyrenee.v1.messages.PatientDiagnosis|undefined} value
 * @return {!proto.heyrenee.v1.CreatePatientDiagnosisRequest} returns this
*/
proto.heyrenee.v1.CreatePatientDiagnosisRequest.prototype.setPatientDiagnosis = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.heyrenee.v1.CreatePatientDiagnosisRequest} returns this
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.prototype.clearPatientDiagnosis = function() {
  return this.setPatientDiagnosis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.heyrenee.v1.CreatePatientDiagnosisRequest.prototype.hasPatientDiagnosis = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.UpdatePatientDiagnosisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientDiagnosis: (f = msg.getPatientDiagnosis()) && heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest}
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.UpdatePatientDiagnosisRequest;
  return proto.heyrenee.v1.UpdatePatientDiagnosisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest}
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis;
      reader.readMessage(value,heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.deserializeBinaryFromReader);
      msg.setPatientDiagnosis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.UpdatePatientDiagnosisRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientDiagnosis();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.serializeBinaryToWriter
    );
  }
};


/**
 * optional messages.PatientDiagnosis patient_diagnosis = 1;
 * @return {?proto.heyrenee.v1.messages.PatientDiagnosis}
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.prototype.getPatientDiagnosis = function() {
  return /** @type{?proto.heyrenee.v1.messages.PatientDiagnosis} */ (
    jspb.Message.getWrapperField(this, heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis, 1));
};


/**
 * @param {?proto.heyrenee.v1.messages.PatientDiagnosis|undefined} value
 * @return {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest} returns this
*/
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.prototype.setPatientDiagnosis = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.heyrenee.v1.UpdatePatientDiagnosisRequest} returns this
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.prototype.clearPatientDiagnosis = function() {
  return this.setPatientDiagnosis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.heyrenee.v1.UpdatePatientDiagnosisRequest.prototype.hasPatientDiagnosis = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.ListPatientDiagnosesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.ListPatientDiagnosesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    patientDiagnosisStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesRequest}
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.ListPatientDiagnosesRequest;
  return proto.heyrenee.v1.ListPatientDiagnosesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.ListPatientDiagnosesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesRequest}
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientId(value);
      break;
    case 2:
      var value = /** @type {!proto.heyrenee.v1.messages.PatientDiagnosisStatus} */ (reader.readEnum());
      msg.setPatientDiagnosisStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.ListPatientDiagnosesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.ListPatientDiagnosesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPatientDiagnosisStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string patient_id = 1;
 * @return {string}
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.prototype.getPatientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesRequest} returns this
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.prototype.setPatientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional messages.PatientDiagnosisStatus patient_diagnosis_status = 2;
 * @return {!proto.heyrenee.v1.messages.PatientDiagnosisStatus}
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.prototype.getPatientDiagnosisStatus = function() {
  return /** @type {!proto.heyrenee.v1.messages.PatientDiagnosisStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.heyrenee.v1.messages.PatientDiagnosisStatus} value
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesRequest} returns this
 */
proto.heyrenee.v1.ListPatientDiagnosesRequest.prototype.setPatientDiagnosisStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.heyrenee.v1.ListPatientDiagnosesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.heyrenee.v1.ListPatientDiagnosesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientDiagnosesList: jspb.Message.toObjectList(msg.getPatientDiagnosesList(),
    heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesResponse}
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.heyrenee.v1.ListPatientDiagnosesResponse;
  return proto.heyrenee.v1.ListPatientDiagnosesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.heyrenee.v1.ListPatientDiagnosesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesResponse}
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis;
      reader.readMessage(value,heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.deserializeBinaryFromReader);
      msg.addPatientDiagnoses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.heyrenee.v1.ListPatientDiagnosesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.heyrenee.v1.ListPatientDiagnosesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientDiagnosesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis.serializeBinaryToWriter
    );
  }
};


/**
 * repeated messages.PatientDiagnosis patient_diagnoses = 1;
 * @return {!Array<!proto.heyrenee.v1.messages.PatientDiagnosis>}
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.prototype.getPatientDiagnosesList = function() {
  return /** @type{!Array<!proto.heyrenee.v1.messages.PatientDiagnosis>} */ (
    jspb.Message.getRepeatedWrapperField(this, heyrenee_v1_messages_patient_diagnosis_pb.PatientDiagnosis, 1));
};


/**
 * @param {!Array<!proto.heyrenee.v1.messages.PatientDiagnosis>} value
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesResponse} returns this
*/
proto.heyrenee.v1.ListPatientDiagnosesResponse.prototype.setPatientDiagnosesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.heyrenee.v1.messages.PatientDiagnosis=} opt_value
 * @param {number=} opt_index
 * @return {!proto.heyrenee.v1.messages.PatientDiagnosis}
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.prototype.addPatientDiagnoses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.heyrenee.v1.messages.PatientDiagnosis, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.heyrenee.v1.ListPatientDiagnosesResponse} returns this
 */
proto.heyrenee.v1.ListPatientDiagnosesResponse.prototype.clearPatientDiagnosesList = function() {
  return this.setPatientDiagnosesList([]);
};


goog.object.extend(exports, proto.heyrenee.v1);
