// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpmServiceClient is the client API for RpmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpmServiceClient interface {
	// ListRpmSchedules retrieves a list of a Patient's RpmSchedules. These schedules specify when a patient should use
	// RPM devices to take different RPM measurements.
	ListRpmSchedules(ctx context.Context, in *ListRpmSchedulesRequest, opts ...grpc.CallOption) (*ListRpmSchedulesResponse, error)
	// ListRpmMeasurements retrieves a list of RpmMeasurements for a specific RpmSchedule. These measurements represent a
	// single event where an RPM device was used to take a measurement. The RpmMeasurement contains a list of RpmResults
	// where each individual result of the measurement event is listed.
	ListRpmMeasurements(ctx context.Context, in *ListRpmMeasurementsRequest, opts ...grpc.CallOption) (*ListRpmMeasurementsResponse, error)
}

type rpmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpmServiceClient(cc grpc.ClientConnInterface) RpmServiceClient {
	return &rpmServiceClient{cc}
}

func (c *rpmServiceClient) ListRpmSchedules(ctx context.Context, in *ListRpmSchedulesRequest, opts ...grpc.CallOption) (*ListRpmSchedulesResponse, error) {
	out := new(ListRpmSchedulesResponse)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.RpmService/ListRpmSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpmServiceClient) ListRpmMeasurements(ctx context.Context, in *ListRpmMeasurementsRequest, opts ...grpc.CallOption) (*ListRpmMeasurementsResponse, error) {
	out := new(ListRpmMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.RpmService/ListRpmMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpmServiceServer is the server API for RpmService service.
// All implementations must embed UnimplementedRpmServiceServer
// for forward compatibility
type RpmServiceServer interface {
	// ListRpmSchedules retrieves a list of a Patient's RpmSchedules. These schedules specify when a patient should use
	// RPM devices to take different RPM measurements.
	ListRpmSchedules(context.Context, *ListRpmSchedulesRequest) (*ListRpmSchedulesResponse, error)
	// ListRpmMeasurements retrieves a list of RpmMeasurements for a specific RpmSchedule. These measurements represent a
	// single event where an RPM device was used to take a measurement. The RpmMeasurement contains a list of RpmResults
	// where each individual result of the measurement event is listed.
	ListRpmMeasurements(context.Context, *ListRpmMeasurementsRequest) (*ListRpmMeasurementsResponse, error)
	mustEmbedUnimplementedRpmServiceServer()
}

// UnimplementedRpmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRpmServiceServer struct {
}

func (UnimplementedRpmServiceServer) ListRpmSchedules(context.Context, *ListRpmSchedulesRequest) (*ListRpmSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRpmSchedules not implemented")
}
func (UnimplementedRpmServiceServer) ListRpmMeasurements(context.Context, *ListRpmMeasurementsRequest) (*ListRpmMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRpmMeasurements not implemented")
}
func (UnimplementedRpmServiceServer) mustEmbedUnimplementedRpmServiceServer() {}

// UnsafeRpmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpmServiceServer will
// result in compilation errors.
type UnsafeRpmServiceServer interface {
	mustEmbedUnimplementedRpmServiceServer()
}

func RegisterRpmServiceServer(s grpc.ServiceRegistrar, srv RpmServiceServer) {
	s.RegisterService(&RpmService_ServiceDesc, srv)
}

func _RpmService_ListRpmSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRpmSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpmServiceServer).ListRpmSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.RpmService/ListRpmSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpmServiceServer).ListRpmSchedules(ctx, req.(*ListRpmSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpmService_ListRpmMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRpmMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpmServiceServer).ListRpmMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.RpmService/ListRpmMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpmServiceServer).ListRpmMeasurements(ctx, req.(*ListRpmMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpmService_ServiceDesc is the grpc.ServiceDesc for RpmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heyrenee.v1.RpmService",
	HandlerType: (*RpmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRpmSchedules",
			Handler:    _RpmService_ListRpmSchedules_Handler,
		},
		{
			MethodName: "ListRpmMeasurements",
			Handler:    _RpmService_ListRpmMeasurements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heyrenee/v1/rpm_service.proto",
}
