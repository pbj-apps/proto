// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	messages "github.com/HeyReneeInc/proto/golang/heyrenee/v1/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InsuranceServiceClient is the client API for InsuranceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsuranceServiceClient interface {
	CreateInsurance(ctx context.Context, in *CreateInsuranceRequest, opts ...grpc.CallOption) (*messages.Insurance, error)
	UpdateInsurance(ctx context.Context, in *UpdateInsuranceRequest, opts ...grpc.CallOption) (*messages.Insurance, error)
	ListInsurance(ctx context.Context, in *ListInsuranceRequest, opts ...grpc.CallOption) (*ListInsuranceResponse, error)
}

type insuranceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInsuranceServiceClient(cc grpc.ClientConnInterface) InsuranceServiceClient {
	return &insuranceServiceClient{cc}
}

func (c *insuranceServiceClient) CreateInsurance(ctx context.Context, in *CreateInsuranceRequest, opts ...grpc.CallOption) (*messages.Insurance, error) {
	out := new(messages.Insurance)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.InsuranceService/CreateInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insuranceServiceClient) UpdateInsurance(ctx context.Context, in *UpdateInsuranceRequest, opts ...grpc.CallOption) (*messages.Insurance, error) {
	out := new(messages.Insurance)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.InsuranceService/UpdateInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insuranceServiceClient) ListInsurance(ctx context.Context, in *ListInsuranceRequest, opts ...grpc.CallOption) (*ListInsuranceResponse, error) {
	out := new(ListInsuranceResponse)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.InsuranceService/ListInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsuranceServiceServer is the server API for InsuranceService service.
// All implementations must embed UnimplementedInsuranceServiceServer
// for forward compatibility
type InsuranceServiceServer interface {
	CreateInsurance(context.Context, *CreateInsuranceRequest) (*messages.Insurance, error)
	UpdateInsurance(context.Context, *UpdateInsuranceRequest) (*messages.Insurance, error)
	ListInsurance(context.Context, *ListInsuranceRequest) (*ListInsuranceResponse, error)
	mustEmbedUnimplementedInsuranceServiceServer()
}

// UnimplementedInsuranceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInsuranceServiceServer struct {
}

func (UnimplementedInsuranceServiceServer) CreateInsurance(context.Context, *CreateInsuranceRequest) (*messages.Insurance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsurance not implemented")
}
func (UnimplementedInsuranceServiceServer) UpdateInsurance(context.Context, *UpdateInsuranceRequest) (*messages.Insurance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInsurance not implemented")
}
func (UnimplementedInsuranceServiceServer) ListInsurance(context.Context, *ListInsuranceRequest) (*ListInsuranceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInsurance not implemented")
}
func (UnimplementedInsuranceServiceServer) mustEmbedUnimplementedInsuranceServiceServer() {}

// UnsafeInsuranceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsuranceServiceServer will
// result in compilation errors.
type UnsafeInsuranceServiceServer interface {
	mustEmbedUnimplementedInsuranceServiceServer()
}

func RegisterInsuranceServiceServer(s grpc.ServiceRegistrar, srv InsuranceServiceServer) {
	s.RegisterService(&InsuranceService_ServiceDesc, srv)
}

func _InsuranceService_CreateInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsuranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServiceServer).CreateInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.InsuranceService/CreateInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServiceServer).CreateInsurance(ctx, req.(*CreateInsuranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsuranceService_UpdateInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInsuranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServiceServer).UpdateInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.InsuranceService/UpdateInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServiceServer).UpdateInsurance(ctx, req.(*UpdateInsuranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsuranceService_ListInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInsuranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServiceServer).ListInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.InsuranceService/ListInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServiceServer).ListInsurance(ctx, req.(*ListInsuranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InsuranceService_ServiceDesc is the grpc.ServiceDesc for InsuranceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InsuranceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heyrenee.v1.InsuranceService",
	HandlerType: (*InsuranceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInsurance",
			Handler:    _InsuranceService_CreateInsurance_Handler,
		},
		{
			MethodName: "UpdateInsurance",
			Handler:    _InsuranceService_UpdateInsurance_Handler,
		},
		{
			MethodName: "ListInsurance",
			Handler:    _InsuranceService_ListInsurance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heyrenee/v1/insurance_service.proto",
}
