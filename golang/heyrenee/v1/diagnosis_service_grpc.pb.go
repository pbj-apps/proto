// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	messages "github.com/HeyReneeInc/proto/golang/heyrenee/v1/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiagnosisServiceClient is the client API for DiagnosisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiagnosisServiceClient interface {
	// DiagnosisSuggest returns a list of DiagnosisSuggestions based on a partial search string. This should only be
	// used for autocomplete like features and not as a full fledged Diagnosis search method.
	//
	// TODO(mitch): Use bi-directional streaming once client streaming supported by grpc-web
	// https://github.com/grpc/grpc-web/issues/24
	DiagnosisSuggest(ctx context.Context, in *DiagnosisSuggestRequest, opts ...grpc.CallOption) (*DiagnosisSuggestResponse, error)
	// CreatePatientDiagnosis creates a specified PatientDiagnosis.
	CreatePatientDiagnosis(ctx context.Context, in *CreatePatientDiagnosisRequest, opts ...grpc.CallOption) (*messages.PatientDiagnosis, error)
}

type diagnosisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosisServiceClient(cc grpc.ClientConnInterface) DiagnosisServiceClient {
	return &diagnosisServiceClient{cc}
}

func (c *diagnosisServiceClient) DiagnosisSuggest(ctx context.Context, in *DiagnosisSuggestRequest, opts ...grpc.CallOption) (*DiagnosisSuggestResponse, error) {
	out := new(DiagnosisSuggestResponse)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.DiagnosisService/DiagnosisSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) CreatePatientDiagnosis(ctx context.Context, in *CreatePatientDiagnosisRequest, opts ...grpc.CallOption) (*messages.PatientDiagnosis, error) {
	out := new(messages.PatientDiagnosis)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.DiagnosisService/CreatePatientDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosisServiceServer is the server API for DiagnosisService service.
// All implementations must embed UnimplementedDiagnosisServiceServer
// for forward compatibility
type DiagnosisServiceServer interface {
	// DiagnosisSuggest returns a list of DiagnosisSuggestions based on a partial search string. This should only be
	// used for autocomplete like features and not as a full fledged Diagnosis search method.
	//
	// TODO(mitch): Use bi-directional streaming once client streaming supported by grpc-web
	// https://github.com/grpc/grpc-web/issues/24
	DiagnosisSuggest(context.Context, *DiagnosisSuggestRequest) (*DiagnosisSuggestResponse, error)
	// CreatePatientDiagnosis creates a specified PatientDiagnosis.
	CreatePatientDiagnosis(context.Context, *CreatePatientDiagnosisRequest) (*messages.PatientDiagnosis, error)
	mustEmbedUnimplementedDiagnosisServiceServer()
}

// UnimplementedDiagnosisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiagnosisServiceServer struct {
}

func (UnimplementedDiagnosisServiceServer) DiagnosisSuggest(context.Context, *DiagnosisSuggestRequest) (*DiagnosisSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiagnosisSuggest not implemented")
}
func (UnimplementedDiagnosisServiceServer) CreatePatientDiagnosis(context.Context, *CreatePatientDiagnosisRequest) (*messages.PatientDiagnosis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatientDiagnosis not implemented")
}
func (UnimplementedDiagnosisServiceServer) mustEmbedUnimplementedDiagnosisServiceServer() {}

// UnsafeDiagnosisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiagnosisServiceServer will
// result in compilation errors.
type UnsafeDiagnosisServiceServer interface {
	mustEmbedUnimplementedDiagnosisServiceServer()
}

func RegisterDiagnosisServiceServer(s grpc.ServiceRegistrar, srv DiagnosisServiceServer) {
	s.RegisterService(&DiagnosisService_ServiceDesc, srv)
}

func _DiagnosisService_DiagnosisSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnosisSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DiagnosisSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.DiagnosisService/DiagnosisSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DiagnosisSuggest(ctx, req.(*DiagnosisSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_CreatePatientDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).CreatePatientDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.DiagnosisService/CreatePatientDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).CreatePatientDiagnosis(ctx, req.(*CreatePatientDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiagnosisService_ServiceDesc is the grpc.ServiceDesc for DiagnosisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiagnosisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heyrenee.v1.DiagnosisService",
	HandlerType: (*DiagnosisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiagnosisSuggest",
			Handler:    _DiagnosisService_DiagnosisSuggest_Handler,
		},
		{
			MethodName: "CreatePatientDiagnosis",
			Handler:    _DiagnosisService_CreatePatientDiagnosis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heyrenee/v1/diagnosis_service.proto",
}
