// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: heyrenee/v1/messages/rpm_schedule.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpmScheduleType int32

const (
	RpmScheduleType_RPM_SCHEDULE_TYPE_UNSPECIFIED    RpmScheduleType = 0
	RpmScheduleType_RPM_SCHEDULE_TYPE_HEART_RATE     RpmScheduleType = 1
	RpmScheduleType_RPM_SCHEDULE_TYPE_BLOOD_PRESSURE RpmScheduleType = 2
	RpmScheduleType_RPM_SCHEDULE_TYPE_PULSE          RpmScheduleType = 3
	RpmScheduleType_RPM_SCHEDULE_TYPE_SP_O2          RpmScheduleType = 4
	RpmScheduleType_RPM_SCHEDULE_TYPE_WEIGHT         RpmScheduleType = 5
	RpmScheduleType_RPM_SCHEDULE_TYPE_GLUCOSE        RpmScheduleType = 6
)

// Enum value maps for RpmScheduleType.
var (
	RpmScheduleType_name = map[int32]string{
		0: "RPM_SCHEDULE_TYPE_UNSPECIFIED",
		1: "RPM_SCHEDULE_TYPE_HEART_RATE",
		2: "RPM_SCHEDULE_TYPE_BLOOD_PRESSURE",
		3: "RPM_SCHEDULE_TYPE_PULSE",
		4: "RPM_SCHEDULE_TYPE_SP_O2",
		5: "RPM_SCHEDULE_TYPE_WEIGHT",
		6: "RPM_SCHEDULE_TYPE_GLUCOSE",
	}
	RpmScheduleType_value = map[string]int32{
		"RPM_SCHEDULE_TYPE_UNSPECIFIED":    0,
		"RPM_SCHEDULE_TYPE_HEART_RATE":     1,
		"RPM_SCHEDULE_TYPE_BLOOD_PRESSURE": 2,
		"RPM_SCHEDULE_TYPE_PULSE":          3,
		"RPM_SCHEDULE_TYPE_SP_O2":          4,
		"RPM_SCHEDULE_TYPE_WEIGHT":         5,
		"RPM_SCHEDULE_TYPE_GLUCOSE":        6,
	}
)

func (x RpmScheduleType) Enum() *RpmScheduleType {
	p := new(RpmScheduleType)
	*p = x
	return p
}

func (x RpmScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpmScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_rpm_schedule_proto_enumTypes[0].Descriptor()
}

func (RpmScheduleType) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_rpm_schedule_proto_enumTypes[0]
}

func (x RpmScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpmScheduleType.Descriptor instead.
func (RpmScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_schedule_proto_rawDescGZIP(), []int{0}
}

type RpmScheduleStatus int32

const (
	RpmScheduleStatus_RPM_SCHEDULE_STATUS_UNSPECIFIED RpmScheduleStatus = 0
	RpmScheduleStatus_RPM_SCHEDULE_ACTIVE             RpmScheduleStatus = 1
	RpmScheduleStatus_RPM_SCHEDULE_INACTIVE           RpmScheduleStatus = 2
)

// Enum value maps for RpmScheduleStatus.
var (
	RpmScheduleStatus_name = map[int32]string{
		0: "RPM_SCHEDULE_STATUS_UNSPECIFIED",
		1: "RPM_SCHEDULE_ACTIVE",
		2: "RPM_SCHEDULE_INACTIVE",
	}
	RpmScheduleStatus_value = map[string]int32{
		"RPM_SCHEDULE_STATUS_UNSPECIFIED": 0,
		"RPM_SCHEDULE_ACTIVE":             1,
		"RPM_SCHEDULE_INACTIVE":           2,
	}
)

func (x RpmScheduleStatus) Enum() *RpmScheduleStatus {
	p := new(RpmScheduleStatus)
	*p = x
	return p
}

func (x RpmScheduleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpmScheduleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_rpm_schedule_proto_enumTypes[1].Descriptor()
}

func (RpmScheduleStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_rpm_schedule_proto_enumTypes[1]
}

func (x RpmScheduleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpmScheduleStatus.Descriptor instead.
func (RpmScheduleStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_schedule_proto_rawDescGZIP(), []int{1}
}

type RpmSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                               string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PatientId                            string                 `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	RpmScheduleId                        string                 `protobuf:"bytes,3,opt,name=rpm_schedule_id,json=rpmScheduleId,proto3" json:"rpm_schedule_id,omitempty"`
	RpmScheduleType                      RpmScheduleType        `protobuf:"varint,4,opt,name=rpm_schedule_type,json=rpmScheduleType,proto3,enum=heyrenee.v1.messages.RpmScheduleType" json:"rpm_schedule_type,omitempty"`
	FirstMeasurementRegimenStart         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=first_measurement_regimen_start,json=firstMeasurementRegimenStart,proto3" json:"first_measurement_regimen_start,omitempty"`
	MeasurementRegimenDuration           *durationpb.Duration   `protobuf:"bytes,6,opt,name=measurement_regimen_duration,json=measurementRegimenDuration,proto3" json:"measurement_regimen_duration,omitempty"`
	MeasurementsPerRegimen               int64                  `protobuf:"varint,7,opt,name=measurements_per_regimen,json=measurementsPerRegimen,proto3" json:"measurements_per_regimen,omitempty"`
	MeasurementDurationsFromRegimenStart []*durationpb.Duration `protobuf:"bytes,8,rep,name=measurement_durations_from_regimen_start,json=measurementDurationsFromRegimenStart,proto3" json:"measurement_durations_from_regimen_start,omitempty"`
	// Types that are assignable to Provider:
	//	*RpmSchedule_ProviderId
	//	*RpmSchedule_ProviderMessage
	Provider          isRpmSchedule_Provider `protobuf_oneof:"provider"`
	RpmScheduleStatus RpmScheduleStatus      `protobuf:"varint,11,opt,name=rpm_schedule_status,json=rpmScheduleStatus,proto3,enum=heyrenee.v1.messages.RpmScheduleStatus" json:"rpm_schedule_status,omitempty"`
}

func (x *RpmSchedule) Reset() {
	*x = RpmSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyrenee_v1_messages_rpm_schedule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpmSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpmSchedule) ProtoMessage() {}

func (x *RpmSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_heyrenee_v1_messages_rpm_schedule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpmSchedule.ProtoReflect.Descriptor instead.
func (*RpmSchedule) Descriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_schedule_proto_rawDescGZIP(), []int{0}
}

func (x *RpmSchedule) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RpmSchedule) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *RpmSchedule) GetRpmScheduleId() string {
	if x != nil {
		return x.RpmScheduleId
	}
	return ""
}

func (x *RpmSchedule) GetRpmScheduleType() RpmScheduleType {
	if x != nil {
		return x.RpmScheduleType
	}
	return RpmScheduleType_RPM_SCHEDULE_TYPE_UNSPECIFIED
}

func (x *RpmSchedule) GetFirstMeasurementRegimenStart() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstMeasurementRegimenStart
	}
	return nil
}

func (x *RpmSchedule) GetMeasurementRegimenDuration() *durationpb.Duration {
	if x != nil {
		return x.MeasurementRegimenDuration
	}
	return nil
}

func (x *RpmSchedule) GetMeasurementsPerRegimen() int64 {
	if x != nil {
		return x.MeasurementsPerRegimen
	}
	return 0
}

func (x *RpmSchedule) GetMeasurementDurationsFromRegimenStart() []*durationpb.Duration {
	if x != nil {
		return x.MeasurementDurationsFromRegimenStart
	}
	return nil
}

func (m *RpmSchedule) GetProvider() isRpmSchedule_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *RpmSchedule) GetProviderId() string {
	if x, ok := x.GetProvider().(*RpmSchedule_ProviderId); ok {
		return x.ProviderId
	}
	return ""
}

func (x *RpmSchedule) GetProviderMessage() *Provider {
	if x, ok := x.GetProvider().(*RpmSchedule_ProviderMessage); ok {
		return x.ProviderMessage
	}
	return nil
}

func (x *RpmSchedule) GetRpmScheduleStatus() RpmScheduleStatus {
	if x != nil {
		return x.RpmScheduleStatus
	}
	return RpmScheduleStatus_RPM_SCHEDULE_STATUS_UNSPECIFIED
}

type isRpmSchedule_Provider interface {
	isRpmSchedule_Provider()
}

type RpmSchedule_ProviderId struct {
	ProviderId string `protobuf:"bytes,9,opt,name=provider_id,json=providerId,proto3,oneof"`
}

type RpmSchedule_ProviderMessage struct {
	ProviderMessage *Provider `protobuf:"bytes,10,opt,name=provider_message,json=providerMessage,proto3,oneof"`
}

func (*RpmSchedule_ProviderId) isRpmSchedule_Provider() {}

func (*RpmSchedule_ProviderMessage) isRpmSchedule_Provider() {}

var File_heyrenee_v1_messages_rpm_schedule_proto protoreflect.FileDescriptor

var file_heyrenee_v1_messages_rpm_schedule_proto_rawDesc = []byte{
	0x0a, 0x27, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x70, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x68, 0x65, 0x79, 0x72, 0x65,
	0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x06, 0x0a, 0x0b, 0x52, 0x70, 0x6d, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x70, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x70, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x72, 0x70, 0x6d, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x70, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x70, 0x6d, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x1f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x1c, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6d,
	0x65, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6d, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6d,
	0x65, 0x6e, 0x12, 0x71, 0x0a, 0x28, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x24, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x70, 0x6d, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x70, 0x6d, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x72, 0x70, 0x6d,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2a, 0xf3, 0x01, 0x0a, 0x0f, 0x52,
	0x70, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x50, 0x4d,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x55, 0x4c, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x5f, 0x4f,
	0x32, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x55, 0x43, 0x4f, 0x53, 0x45, 0x10, 0x06,
	0x2a, 0x6c, 0x0a, 0x11, 0x52, 0x70, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x50,
	0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x50, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x65, 0x79,
	0x52, 0x65, 0x6e, 0x65, 0x65, 0x49, 0x6e, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_heyrenee_v1_messages_rpm_schedule_proto_rawDescOnce sync.Once
	file_heyrenee_v1_messages_rpm_schedule_proto_rawDescData = file_heyrenee_v1_messages_rpm_schedule_proto_rawDesc
)

func file_heyrenee_v1_messages_rpm_schedule_proto_rawDescGZIP() []byte {
	file_heyrenee_v1_messages_rpm_schedule_proto_rawDescOnce.Do(func() {
		file_heyrenee_v1_messages_rpm_schedule_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyrenee_v1_messages_rpm_schedule_proto_rawDescData)
	})
	return file_heyrenee_v1_messages_rpm_schedule_proto_rawDescData
}

var file_heyrenee_v1_messages_rpm_schedule_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_heyrenee_v1_messages_rpm_schedule_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_heyrenee_v1_messages_rpm_schedule_proto_goTypes = []interface{}{
	(RpmScheduleType)(0),          // 0: heyrenee.v1.messages.RpmScheduleType
	(RpmScheduleStatus)(0),        // 1: heyrenee.v1.messages.RpmScheduleStatus
	(*RpmSchedule)(nil),           // 2: heyrenee.v1.messages.RpmSchedule
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 4: google.protobuf.Duration
	(*Provider)(nil),              // 5: heyrenee.v1.messages.Provider
}
var file_heyrenee_v1_messages_rpm_schedule_proto_depIdxs = []int32{
	0, // 0: heyrenee.v1.messages.RpmSchedule.rpm_schedule_type:type_name -> heyrenee.v1.messages.RpmScheduleType
	3, // 1: heyrenee.v1.messages.RpmSchedule.first_measurement_regimen_start:type_name -> google.protobuf.Timestamp
	4, // 2: heyrenee.v1.messages.RpmSchedule.measurement_regimen_duration:type_name -> google.protobuf.Duration
	4, // 3: heyrenee.v1.messages.RpmSchedule.measurement_durations_from_regimen_start:type_name -> google.protobuf.Duration
	5, // 4: heyrenee.v1.messages.RpmSchedule.provider_message:type_name -> heyrenee.v1.messages.Provider
	1, // 5: heyrenee.v1.messages.RpmSchedule.rpm_schedule_status:type_name -> heyrenee.v1.messages.RpmScheduleStatus
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_heyrenee_v1_messages_rpm_schedule_proto_init() }
func file_heyrenee_v1_messages_rpm_schedule_proto_init() {
	if File_heyrenee_v1_messages_rpm_schedule_proto != nil {
		return
	}
	file_heyrenee_v1_messages_provider_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_heyrenee_v1_messages_rpm_schedule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpmSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_heyrenee_v1_messages_rpm_schedule_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RpmSchedule_ProviderId)(nil),
		(*RpmSchedule_ProviderMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyrenee_v1_messages_rpm_schedule_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_heyrenee_v1_messages_rpm_schedule_proto_goTypes,
		DependencyIndexes: file_heyrenee_v1_messages_rpm_schedule_proto_depIdxs,
		EnumInfos:         file_heyrenee_v1_messages_rpm_schedule_proto_enumTypes,
		MessageInfos:      file_heyrenee_v1_messages_rpm_schedule_proto_msgTypes,
	}.Build()
	File_heyrenee_v1_messages_rpm_schedule_proto = out.File
	file_heyrenee_v1_messages_rpm_schedule_proto_rawDesc = nil
	file_heyrenee_v1_messages_rpm_schedule_proto_goTypes = nil
	file_heyrenee_v1_messages_rpm_schedule_proto_depIdxs = nil
}
