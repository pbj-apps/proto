// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: heyrenee/v1/messages/patient_sdoh_questionnaire.proto

package messages

import (
	enums "github.com/HeyReneeInc/proto/golang/heyrenee/v1/enums"
	_ "github.com/HeyReneeInc/proto/golang/heyrenee/v1/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AmbulatoryStatus int32

const (
	AmbulatoryStatus_AMBULATORY_STATUS_UNSPECIFIED    AmbulatoryStatus = 0
	AmbulatoryStatus_AMBULATORY_STATUS_IS_AMBULATORY  AmbulatoryStatus = 1
	AmbulatoryStatus_AMBULATORY_STATUS_NOT_AMBULATORY AmbulatoryStatus = 2
)

// Enum value maps for AmbulatoryStatus.
var (
	AmbulatoryStatus_name = map[int32]string{
		0: "AMBULATORY_STATUS_UNSPECIFIED",
		1: "AMBULATORY_STATUS_IS_AMBULATORY",
		2: "AMBULATORY_STATUS_NOT_AMBULATORY",
	}
	AmbulatoryStatus_value = map[string]int32{
		"AMBULATORY_STATUS_UNSPECIFIED":    0,
		"AMBULATORY_STATUS_IS_AMBULATORY":  1,
		"AMBULATORY_STATUS_NOT_AMBULATORY": 2,
	}
)

func (x AmbulatoryStatus) Enum() *AmbulatoryStatus {
	p := new(AmbulatoryStatus)
	*p = x
	return p
}

func (x AmbulatoryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmbulatoryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[0].Descriptor()
}

func (AmbulatoryStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[0]
}

func (x AmbulatoryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmbulatoryStatus.Descriptor instead.
func (AmbulatoryStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{0}
}

type FallHistory int32

const (
	FallHistory_FALL_HISTORY_UNSPECIFIED         FallHistory = 0
	FallHistory_FALL_HISTORY_FALLEN_IN_LAST_YEAR FallHistory = 1
	FallHistory_FALL_HISTORY_HAS_NOT_FALLEN      FallHistory = 2
)

// Enum value maps for FallHistory.
var (
	FallHistory_name = map[int32]string{
		0: "FALL_HISTORY_UNSPECIFIED",
		1: "FALL_HISTORY_FALLEN_IN_LAST_YEAR",
		2: "FALL_HISTORY_HAS_NOT_FALLEN",
	}
	FallHistory_value = map[string]int32{
		"FALL_HISTORY_UNSPECIFIED":         0,
		"FALL_HISTORY_FALLEN_IN_LAST_YEAR": 1,
		"FALL_HISTORY_HAS_NOT_FALLEN":      2,
	}
)

func (x FallHistory) Enum() *FallHistory {
	p := new(FallHistory)
	*p = x
	return p
}

func (x FallHistory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FallHistory) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[1].Descriptor()
}

func (FallHistory) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[1]
}

func (x FallHistory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FallHistory.Descriptor instead.
func (FallHistory) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{1}
}

type WalkingSteadiness int32

const (
	WalkingSteadiness_WALKING_STEADINESS_UNSPECIFIED    WalkingSteadiness = 0
	WalkingSteadiness_WALKING_STEADINESS_FEELS_UNSTEADY WalkingSteadiness = 1
	WalkingSteadiness_WALKING_STEADINESS_STEADY         WalkingSteadiness = 2
)

// Enum value maps for WalkingSteadiness.
var (
	WalkingSteadiness_name = map[int32]string{
		0: "WALKING_STEADINESS_UNSPECIFIED",
		1: "WALKING_STEADINESS_FEELS_UNSTEADY",
		2: "WALKING_STEADINESS_STEADY",
	}
	WalkingSteadiness_value = map[string]int32{
		"WALKING_STEADINESS_UNSPECIFIED":    0,
		"WALKING_STEADINESS_FEELS_UNSTEADY": 1,
		"WALKING_STEADINESS_STEADY":         2,
	}
)

func (x WalkingSteadiness) Enum() *WalkingSteadiness {
	p := new(WalkingSteadiness)
	*p = x
	return p
}

func (x WalkingSteadiness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalkingSteadiness) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[2].Descriptor()
}

func (WalkingSteadiness) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[2]
}

func (x WalkingSteadiness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalkingSteadiness.Descriptor instead.
func (WalkingSteadiness) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{2}
}

type WalkingSupportNecessity int32

const (
	WalkingSupportNecessity_WALKING_SUPPORT_NECESSITY_UNSPECIFIED    WalkingSupportNecessity = 0
	WalkingSupportNecessity_WALKING_SUPPORT_NECESSITY_USES_FURNITURE WalkingSupportNecessity = 1
	WalkingSupportNecessity_WALKING_SUPPORT_NECESSITY_NONE           WalkingSupportNecessity = 2
)

// Enum value maps for WalkingSupportNecessity.
var (
	WalkingSupportNecessity_name = map[int32]string{
		0: "WALKING_SUPPORT_NECESSITY_UNSPECIFIED",
		1: "WALKING_SUPPORT_NECESSITY_USES_FURNITURE",
		2: "WALKING_SUPPORT_NECESSITY_NONE",
	}
	WalkingSupportNecessity_value = map[string]int32{
		"WALKING_SUPPORT_NECESSITY_UNSPECIFIED":    0,
		"WALKING_SUPPORT_NECESSITY_USES_FURNITURE": 1,
		"WALKING_SUPPORT_NECESSITY_NONE":           2,
	}
)

func (x WalkingSupportNecessity) Enum() *WalkingSupportNecessity {
	p := new(WalkingSupportNecessity)
	*p = x
	return p
}

func (x WalkingSupportNecessity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalkingSupportNecessity) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[3].Descriptor()
}

func (WalkingSupportNecessity) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[3]
}

func (x WalkingSupportNecessity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalkingSupportNecessity.Descriptor instead.
func (WalkingSupportNecessity) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{3}
}

type WalkingAssistanceAdvisory int32

const (
	WalkingAssistanceAdvisory_WALKING_ASSISTANCE_ADVISORY_UNSPECIFIED    WalkingAssistanceAdvisory = 0
	WalkingAssistanceAdvisory_WALKING_ASSISTANCE_ADVISORY_CANE_OR_WALKER WalkingAssistanceAdvisory = 1
	WalkingAssistanceAdvisory_WALKING_ASSISTANCE_ADVISORY_NONE           WalkingAssistanceAdvisory = 2
)

// Enum value maps for WalkingAssistanceAdvisory.
var (
	WalkingAssistanceAdvisory_name = map[int32]string{
		0: "WALKING_ASSISTANCE_ADVISORY_UNSPECIFIED",
		1: "WALKING_ASSISTANCE_ADVISORY_CANE_OR_WALKER",
		2: "WALKING_ASSISTANCE_ADVISORY_NONE",
	}
	WalkingAssistanceAdvisory_value = map[string]int32{
		"WALKING_ASSISTANCE_ADVISORY_UNSPECIFIED":    0,
		"WALKING_ASSISTANCE_ADVISORY_CANE_OR_WALKER": 1,
		"WALKING_ASSISTANCE_ADVISORY_NONE":           2,
	}
)

func (x WalkingAssistanceAdvisory) Enum() *WalkingAssistanceAdvisory {
	p := new(WalkingAssistanceAdvisory)
	*p = x
	return p
}

func (x WalkingAssistanceAdvisory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalkingAssistanceAdvisory) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[4].Descriptor()
}

func (WalkingAssistanceAdvisory) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[4]
}

func (x WalkingAssistanceAdvisory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalkingAssistanceAdvisory.Descriptor instead.
func (WalkingAssistanceAdvisory) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{4}
}

type WalkingAssistanceOwnership int32

const (
	WalkingAssistanceOwnership_WALKING_ASSISTANCE_OWNERSHIP_UNSPECIFIED    WalkingAssistanceOwnership = 0
	WalkingAssistanceOwnership_WALKING_ASSISTANCE_OWNERSHIP_CANE_OR_WALKER WalkingAssistanceOwnership = 1
	WalkingAssistanceOwnership_WALKING_ASSISTANCE_OWNERSHIP_NONE           WalkingAssistanceOwnership = 2
)

// Enum value maps for WalkingAssistanceOwnership.
var (
	WalkingAssistanceOwnership_name = map[int32]string{
		0: "WALKING_ASSISTANCE_OWNERSHIP_UNSPECIFIED",
		1: "WALKING_ASSISTANCE_OWNERSHIP_CANE_OR_WALKER",
		2: "WALKING_ASSISTANCE_OWNERSHIP_NONE",
	}
	WalkingAssistanceOwnership_value = map[string]int32{
		"WALKING_ASSISTANCE_OWNERSHIP_UNSPECIFIED":    0,
		"WALKING_ASSISTANCE_OWNERSHIP_CANE_OR_WALKER": 1,
		"WALKING_ASSISTANCE_OWNERSHIP_NONE":           2,
	}
)

func (x WalkingAssistanceOwnership) Enum() *WalkingAssistanceOwnership {
	p := new(WalkingAssistanceOwnership)
	*p = x
	return p
}

func (x WalkingAssistanceOwnership) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalkingAssistanceOwnership) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[5].Descriptor()
}

func (WalkingAssistanceOwnership) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[5]
}

func (x WalkingAssistanceOwnership) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalkingAssistanceOwnership.Descriptor instead.
func (WalkingAssistanceOwnership) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{5}
}

type FallingWorry int32

const (
	FallingWorry_FALLING_WORRY_UNSPECIFIED FallingWorry = 0
	FallingWorry_FALLING_WORRY_IS_WORRIED  FallingWorry = 1
	FallingWorry_FALLING_WORRY_NOT_WORRIED FallingWorry = 2
)

// Enum value maps for FallingWorry.
var (
	FallingWorry_name = map[int32]string{
		0: "FALLING_WORRY_UNSPECIFIED",
		1: "FALLING_WORRY_IS_WORRIED",
		2: "FALLING_WORRY_NOT_WORRIED",
	}
	FallingWorry_value = map[string]int32{
		"FALLING_WORRY_UNSPECIFIED": 0,
		"FALLING_WORRY_IS_WORRIED":  1,
		"FALLING_WORRY_NOT_WORRIED": 2,
	}
)

func (x FallingWorry) Enum() *FallingWorry {
	p := new(FallingWorry)
	*p = x
	return p
}

func (x FallingWorry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FallingWorry) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[6].Descriptor()
}

func (FallingWorry) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[6]
}

func (x FallingWorry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FallingWorry.Descriptor instead.
func (FallingWorry) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{6}
}

type StandingUpAssistance int32

const (
	StandingUpAssistance_STANDING_UP_ASSISTANCE_UNSPECIFIED StandingUpAssistance = 0
	StandingUpAssistance_STANDING_UP_ASSISTANCE_PUSHES      StandingUpAssistance = 1
	StandingUpAssistance_STANDING_UP_ASSISTANCE_NONE        StandingUpAssistance = 2
)

// Enum value maps for StandingUpAssistance.
var (
	StandingUpAssistance_name = map[int32]string{
		0: "STANDING_UP_ASSISTANCE_UNSPECIFIED",
		1: "STANDING_UP_ASSISTANCE_PUSHES",
		2: "STANDING_UP_ASSISTANCE_NONE",
	}
	StandingUpAssistance_value = map[string]int32{
		"STANDING_UP_ASSISTANCE_UNSPECIFIED": 0,
		"STANDING_UP_ASSISTANCE_PUSHES":      1,
		"STANDING_UP_ASSISTANCE_NONE":        2,
	}
)

func (x StandingUpAssistance) Enum() *StandingUpAssistance {
	p := new(StandingUpAssistance)
	*p = x
	return p
}

func (x StandingUpAssistance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandingUpAssistance) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[7].Descriptor()
}

func (StandingUpAssistance) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[7]
}

func (x StandingUpAssistance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandingUpAssistance.Descriptor instead.
func (StandingUpAssistance) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{7}
}

type SteppingUpDifficulty int32

const (
	SteppingUpDifficulty_STEPPING_UP_DIFFICULTY_UNSPECIFIED    SteppingUpDifficulty = 0
	SteppingUpDifficulty_STEPPING_UP_DIFFICULTY_HAS_DIFFICULTY SteppingUpDifficulty = 1
	SteppingUpDifficulty_STEPPING_UP_DIFFICULTY_NONE           SteppingUpDifficulty = 2
)

// Enum value maps for SteppingUpDifficulty.
var (
	SteppingUpDifficulty_name = map[int32]string{
		0: "STEPPING_UP_DIFFICULTY_UNSPECIFIED",
		1: "STEPPING_UP_DIFFICULTY_HAS_DIFFICULTY",
		2: "STEPPING_UP_DIFFICULTY_NONE",
	}
	SteppingUpDifficulty_value = map[string]int32{
		"STEPPING_UP_DIFFICULTY_UNSPECIFIED":    0,
		"STEPPING_UP_DIFFICULTY_HAS_DIFFICULTY": 1,
		"STEPPING_UP_DIFFICULTY_NONE":           2,
	}
)

func (x SteppingUpDifficulty) Enum() *SteppingUpDifficulty {
	p := new(SteppingUpDifficulty)
	*p = x
	return p
}

func (x SteppingUpDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SteppingUpDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[8].Descriptor()
}

func (SteppingUpDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[8]
}

func (x SteppingUpDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SteppingUpDifficulty.Descriptor instead.
func (SteppingUpDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{8}
}

type FeelingInFeetStatus int32

const (
	FeelingInFeetStatus_FEELING_IN_FEET_STATUS_UNSPECIFIED FeelingInFeetStatus = 0
	FeelingInFeetStatus_FEELING_IN_FEET_STATUS_LOST_SOME   FeelingInFeetStatus = 1
	FeelingInFeetStatus_FEELING_IN_FEET_STATUS_HAS_ALL     FeelingInFeetStatus = 2
)

// Enum value maps for FeelingInFeetStatus.
var (
	FeelingInFeetStatus_name = map[int32]string{
		0: "FEELING_IN_FEET_STATUS_UNSPECIFIED",
		1: "FEELING_IN_FEET_STATUS_LOST_SOME",
		2: "FEELING_IN_FEET_STATUS_HAS_ALL",
	}
	FeelingInFeetStatus_value = map[string]int32{
		"FEELING_IN_FEET_STATUS_UNSPECIFIED": 0,
		"FEELING_IN_FEET_STATUS_LOST_SOME":   1,
		"FEELING_IN_FEET_STATUS_HAS_ALL":     2,
	}
)

func (x FeelingInFeetStatus) Enum() *FeelingInFeetStatus {
	p := new(FeelingInFeetStatus)
	*p = x
	return p
}

func (x FeelingInFeetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeelingInFeetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[9].Descriptor()
}

func (FeelingInFeetStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[9]
}

func (x FeelingInFeetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeelingInFeetStatus.Descriptor instead.
func (FeelingInFeetStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{9}
}

type FeelingLightheadedFromMedsStatus int32

const (
	FeelingLightheadedFromMedsStatus_FEELING_LIGHTHEADED_FROM_MEDS_STATUS_UNSPECIFIED  FeelingLightheadedFromMedsStatus = 0
	FeelingLightheadedFromMedsStatus_FEELING_LIGHTHEADED_FROM_MEDS_STATUS_AT_LEAST_ONE FeelingLightheadedFromMedsStatus = 1
	FeelingLightheadedFromMedsStatus_FEELING_LIGHTHEADED_FROM_MEDS_STATUS_NO_MEDS      FeelingLightheadedFromMedsStatus = 2
)

// Enum value maps for FeelingLightheadedFromMedsStatus.
var (
	FeelingLightheadedFromMedsStatus_name = map[int32]string{
		0: "FEELING_LIGHTHEADED_FROM_MEDS_STATUS_UNSPECIFIED",
		1: "FEELING_LIGHTHEADED_FROM_MEDS_STATUS_AT_LEAST_ONE",
		2: "FEELING_LIGHTHEADED_FROM_MEDS_STATUS_NO_MEDS",
	}
	FeelingLightheadedFromMedsStatus_value = map[string]int32{
		"FEELING_LIGHTHEADED_FROM_MEDS_STATUS_UNSPECIFIED":  0,
		"FEELING_LIGHTHEADED_FROM_MEDS_STATUS_AT_LEAST_ONE": 1,
		"FEELING_LIGHTHEADED_FROM_MEDS_STATUS_NO_MEDS":      2,
	}
)

func (x FeelingLightheadedFromMedsStatus) Enum() *FeelingLightheadedFromMedsStatus {
	p := new(FeelingLightheadedFromMedsStatus)
	*p = x
	return p
}

func (x FeelingLightheadedFromMedsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeelingLightheadedFromMedsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[10].Descriptor()
}

func (FeelingLightheadedFromMedsStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[10]
}

func (x FeelingLightheadedFromMedsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeelingLightheadedFromMedsStatus.Descriptor instead.
func (FeelingLightheadedFromMedsStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{10}
}

type SmokingStatus int32

const (
	SmokingStatus_SMOKING_STATUS_UNSPECIFIED    SmokingStatus = 0
	SmokingStatus_SMOKING_STATUS_SMOKES         SmokingStatus = 1
	SmokingStatus_SMOKING_STATUS_DOES_NOT_SMOKE SmokingStatus = 2
)

// Enum value maps for SmokingStatus.
var (
	SmokingStatus_name = map[int32]string{
		0: "SMOKING_STATUS_UNSPECIFIED",
		1: "SMOKING_STATUS_SMOKES",
		2: "SMOKING_STATUS_DOES_NOT_SMOKE",
	}
	SmokingStatus_value = map[string]int32{
		"SMOKING_STATUS_UNSPECIFIED":    0,
		"SMOKING_STATUS_SMOKES":         1,
		"SMOKING_STATUS_DOES_NOT_SMOKE": 2,
	}
)

func (x SmokingStatus) Enum() *SmokingStatus {
	p := new(SmokingStatus)
	*p = x
	return p
}

func (x SmokingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmokingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[11].Descriptor()
}

func (SmokingStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[11]
}

func (x SmokingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmokingStatus.Descriptor instead.
func (SmokingStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{11}
}

type QuitSmokingStatus int32

const (
	QuitSmokingStatus_QUIT_SMOKING_STATUS_UNSPECIFIED           QuitSmokingStatus = 0
	QuitSmokingStatus_QUIT_SMOKING_STATUS_WANTS_TO_QUIT         QuitSmokingStatus = 1
	QuitSmokingStatus_QUIT_SMOKING_STATUS_DOES_NOT_WANT_TO_QUIT QuitSmokingStatus = 2
)

// Enum value maps for QuitSmokingStatus.
var (
	QuitSmokingStatus_name = map[int32]string{
		0: "QUIT_SMOKING_STATUS_UNSPECIFIED",
		1: "QUIT_SMOKING_STATUS_WANTS_TO_QUIT",
		2: "QUIT_SMOKING_STATUS_DOES_NOT_WANT_TO_QUIT",
	}
	QuitSmokingStatus_value = map[string]int32{
		"QUIT_SMOKING_STATUS_UNSPECIFIED":           0,
		"QUIT_SMOKING_STATUS_WANTS_TO_QUIT":         1,
		"QUIT_SMOKING_STATUS_DOES_NOT_WANT_TO_QUIT": 2,
	}
)

func (x QuitSmokingStatus) Enum() *QuitSmokingStatus {
	p := new(QuitSmokingStatus)
	*p = x
	return p
}

func (x QuitSmokingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuitSmokingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[12].Descriptor()
}

func (QuitSmokingStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[12]
}

func (x QuitSmokingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuitSmokingStatus.Descriptor instead.
func (QuitSmokingStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{12}
}

type AlcoholDrinkingStatus int32

const (
	AlcoholDrinkingStatus_ALCOHOL_DRINKING_STATUS_UNSPECIFIED    AlcoholDrinkingStatus = 0
	AlcoholDrinkingStatus_ALCOHOL_DRINKING_STATUS_DRINKS         AlcoholDrinkingStatus = 1
	AlcoholDrinkingStatus_ALCOHOL_DRINKING_STATUS_DOES_NOT_DRINK AlcoholDrinkingStatus = 2
)

// Enum value maps for AlcoholDrinkingStatus.
var (
	AlcoholDrinkingStatus_name = map[int32]string{
		0: "ALCOHOL_DRINKING_STATUS_UNSPECIFIED",
		1: "ALCOHOL_DRINKING_STATUS_DRINKS",
		2: "ALCOHOL_DRINKING_STATUS_DOES_NOT_DRINK",
	}
	AlcoholDrinkingStatus_value = map[string]int32{
		"ALCOHOL_DRINKING_STATUS_UNSPECIFIED":    0,
		"ALCOHOL_DRINKING_STATUS_DRINKS":         1,
		"ALCOHOL_DRINKING_STATUS_DOES_NOT_DRINK": 2,
	}
)

func (x AlcoholDrinkingStatus) Enum() *AlcoholDrinkingStatus {
	p := new(AlcoholDrinkingStatus)
	*p = x
	return p
}

func (x AlcoholDrinkingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlcoholDrinkingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[13].Descriptor()
}

func (AlcoholDrinkingStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[13]
}

func (x AlcoholDrinkingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlcoholDrinkingStatus.Descriptor instead.
func (AlcoholDrinkingStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{13}
}

type QuitDrinkingStatus int32

const (
	QuitDrinkingStatus_QUIT_DRINKING_STATUS_UNSPECIFIED           QuitDrinkingStatus = 0
	QuitDrinkingStatus_QUIT_DRINKING_STATUS_WANTS_TO_QUIT         QuitDrinkingStatus = 1
	QuitDrinkingStatus_QUIT_DRINKING_STATUS_DOES_NOT_WANT_TO_QUIT QuitDrinkingStatus = 2
)

// Enum value maps for QuitDrinkingStatus.
var (
	QuitDrinkingStatus_name = map[int32]string{
		0: "QUIT_DRINKING_STATUS_UNSPECIFIED",
		1: "QUIT_DRINKING_STATUS_WANTS_TO_QUIT",
		2: "QUIT_DRINKING_STATUS_DOES_NOT_WANT_TO_QUIT",
	}
	QuitDrinkingStatus_value = map[string]int32{
		"QUIT_DRINKING_STATUS_UNSPECIFIED":           0,
		"QUIT_DRINKING_STATUS_WANTS_TO_QUIT":         1,
		"QUIT_DRINKING_STATUS_DOES_NOT_WANT_TO_QUIT": 2,
	}
)

func (x QuitDrinkingStatus) Enum() *QuitDrinkingStatus {
	p := new(QuitDrinkingStatus)
	*p = x
	return p
}

func (x QuitDrinkingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuitDrinkingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[14].Descriptor()
}

func (QuitDrinkingStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[14]
}

func (x QuitDrinkingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuitDrinkingStatus.Descriptor instead.
func (QuitDrinkingStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{14}
}

type SchedulingDoctorsAppointmentsDifficulty int32

const (
	SchedulingDoctorsAppointmentsDifficulty_SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED    SchedulingDoctorsAppointmentsDifficulty = 0
	SchedulingDoctorsAppointmentsDifficulty_SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_HAS_DIFFICULTY SchedulingDoctorsAppointmentsDifficulty = 1
	SchedulingDoctorsAppointmentsDifficulty_SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_NO_DIFFICULTY  SchedulingDoctorsAppointmentsDifficulty = 2
)

// Enum value maps for SchedulingDoctorsAppointmentsDifficulty.
var (
	SchedulingDoctorsAppointmentsDifficulty_name = map[int32]string{
		0: "SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED",
		1: "SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_HAS_DIFFICULTY",
		2: "SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_NO_DIFFICULTY",
	}
	SchedulingDoctorsAppointmentsDifficulty_value = map[string]int32{
		"SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED":    0,
		"SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_HAS_DIFFICULTY": 1,
		"SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_NO_DIFFICULTY":  2,
	}
)

func (x SchedulingDoctorsAppointmentsDifficulty) Enum() *SchedulingDoctorsAppointmentsDifficulty {
	p := new(SchedulingDoctorsAppointmentsDifficulty)
	*p = x
	return p
}

func (x SchedulingDoctorsAppointmentsDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingDoctorsAppointmentsDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[15].Descriptor()
}

func (SchedulingDoctorsAppointmentsDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[15]
}

func (x SchedulingDoctorsAppointmentsDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingDoctorsAppointmentsDifficulty.Descriptor instead.
func (SchedulingDoctorsAppointmentsDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{15}
}

type GettingToDoctorsAppointmentsDifficulty int32

const (
	GettingToDoctorsAppointmentsDifficulty_GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED          GettingToDoctorsAppointmentsDifficulty = 0
	GettingToDoctorsAppointmentsDifficulty_GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_TROUBLE_FINDING_RIDE GettingToDoctorsAppointmentsDifficulty = 1
	GettingToDoctorsAppointmentsDifficulty_GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_NO_DIFFICULTY        GettingToDoctorsAppointmentsDifficulty = 2
)

// Enum value maps for GettingToDoctorsAppointmentsDifficulty.
var (
	GettingToDoctorsAppointmentsDifficulty_name = map[int32]string{
		0: "GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED",
		1: "GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_TROUBLE_FINDING_RIDE",
		2: "GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_NO_DIFFICULTY",
	}
	GettingToDoctorsAppointmentsDifficulty_value = map[string]int32{
		"GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED":          0,
		"GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_TROUBLE_FINDING_RIDE": 1,
		"GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_NO_DIFFICULTY":        2,
	}
)

func (x GettingToDoctorsAppointmentsDifficulty) Enum() *GettingToDoctorsAppointmentsDifficulty {
	p := new(GettingToDoctorsAppointmentsDifficulty)
	*p = x
	return p
}

func (x GettingToDoctorsAppointmentsDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GettingToDoctorsAppointmentsDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[16].Descriptor()
}

func (GettingToDoctorsAppointmentsDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[16]
}

func (x GettingToDoctorsAppointmentsDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GettingToDoctorsAppointmentsDifficulty.Descriptor instead.
func (GettingToDoctorsAppointmentsDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{16}
}

type AdlHelpNecessity int32

const (
	AdlHelpNecessity_ADL_HELP_NECESSITY_UNSPECIFIED AdlHelpNecessity = 0
	AdlHelpNecessity_ADL_HELP_NECESSITY_NEEDED      AdlHelpNecessity = 1
	AdlHelpNecessity_ADL_HELP_NECESSITY_NOT_NEEDED  AdlHelpNecessity = 2
)

// Enum value maps for AdlHelpNecessity.
var (
	AdlHelpNecessity_name = map[int32]string{
		0: "ADL_HELP_NECESSITY_UNSPECIFIED",
		1: "ADL_HELP_NECESSITY_NEEDED",
		2: "ADL_HELP_NECESSITY_NOT_NEEDED",
	}
	AdlHelpNecessity_value = map[string]int32{
		"ADL_HELP_NECESSITY_UNSPECIFIED": 0,
		"ADL_HELP_NECESSITY_NEEDED":      1,
		"ADL_HELP_NECESSITY_NOT_NEEDED":  2,
	}
)

func (x AdlHelpNecessity) Enum() *AdlHelpNecessity {
	p := new(AdlHelpNecessity)
	*p = x
	return p
}

func (x AdlHelpNecessity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdlHelpNecessity) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[17].Descriptor()
}

func (AdlHelpNecessity) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[17]
}

func (x AdlHelpNecessity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdlHelpNecessity.Descriptor instead.
func (AdlHelpNecessity) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{17}
}

type GettingToGroceryStoreDifficulty int32

const (
	GettingToGroceryStoreDifficulty_GETTING_TO_GROCERY_STORE_DIFFICULTY_UNSPECIFIED  GettingToGroceryStoreDifficulty = 0
	GettingToGroceryStoreDifficulty_GETTING_TO_GROCERY_STORE_DIFFICULTY_UNABLE_ALONE GettingToGroceryStoreDifficulty = 1
	GettingToGroceryStoreDifficulty_GETTING_TO_GROCERY_STORE_DIFFICULTY_ABLE_ALONE   GettingToGroceryStoreDifficulty = 2
)

// Enum value maps for GettingToGroceryStoreDifficulty.
var (
	GettingToGroceryStoreDifficulty_name = map[int32]string{
		0: "GETTING_TO_GROCERY_STORE_DIFFICULTY_UNSPECIFIED",
		1: "GETTING_TO_GROCERY_STORE_DIFFICULTY_UNABLE_ALONE",
		2: "GETTING_TO_GROCERY_STORE_DIFFICULTY_ABLE_ALONE",
	}
	GettingToGroceryStoreDifficulty_value = map[string]int32{
		"GETTING_TO_GROCERY_STORE_DIFFICULTY_UNSPECIFIED":  0,
		"GETTING_TO_GROCERY_STORE_DIFFICULTY_UNABLE_ALONE": 1,
		"GETTING_TO_GROCERY_STORE_DIFFICULTY_ABLE_ALONE":   2,
	}
)

func (x GettingToGroceryStoreDifficulty) Enum() *GettingToGroceryStoreDifficulty {
	p := new(GettingToGroceryStoreDifficulty)
	*p = x
	return p
}

func (x GettingToGroceryStoreDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GettingToGroceryStoreDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[18].Descriptor()
}

func (GettingToGroceryStoreDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[18]
}

func (x GettingToGroceryStoreDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GettingToGroceryStoreDifficulty.Descriptor instead.
func (GettingToGroceryStoreDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{18}
}

type SocialIsolation int32

const (
	SocialIsolation_SOCIAL_ISOLATION_UNSPECIFIED            SocialIsolation = 0
	SocialIsolation_SOCIAL_ISOLATION_FEELS_ISOLATED         SocialIsolation = 1
	SocialIsolation_SOCIAL_ISOLATION_DOES_NOT_FEEL_ISOLATED SocialIsolation = 2
)

// Enum value maps for SocialIsolation.
var (
	SocialIsolation_name = map[int32]string{
		0: "SOCIAL_ISOLATION_UNSPECIFIED",
		1: "SOCIAL_ISOLATION_FEELS_ISOLATED",
		2: "SOCIAL_ISOLATION_DOES_NOT_FEEL_ISOLATED",
	}
	SocialIsolation_value = map[string]int32{
		"SOCIAL_ISOLATION_UNSPECIFIED":            0,
		"SOCIAL_ISOLATION_FEELS_ISOLATED":         1,
		"SOCIAL_ISOLATION_DOES_NOT_FEEL_ISOLATED": 2,
	}
)

func (x SocialIsolation) Enum() *SocialIsolation {
	p := new(SocialIsolation)
	*p = x
	return p
}

func (x SocialIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[19].Descriptor()
}

func (SocialIsolation) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[19]
}

func (x SocialIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialIsolation.Descriptor instead.
func (SocialIsolation) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{19}
}

type MealPlanningAssistance int32

const (
	MealPlanningAssistance_MEAL_PLANNING_ASSISTANCE_UNSPECIFIED   MealPlanningAssistance = 0
	MealPlanningAssistance_MEAL_PLANNING_ASSISTANCE_WANTS         MealPlanningAssistance = 1
	MealPlanningAssistance_MEAL_PLANNING_ASSISTANCE_DOES_NOT_WANT MealPlanningAssistance = 2
)

// Enum value maps for MealPlanningAssistance.
var (
	MealPlanningAssistance_name = map[int32]string{
		0: "MEAL_PLANNING_ASSISTANCE_UNSPECIFIED",
		1: "MEAL_PLANNING_ASSISTANCE_WANTS",
		2: "MEAL_PLANNING_ASSISTANCE_DOES_NOT_WANT",
	}
	MealPlanningAssistance_value = map[string]int32{
		"MEAL_PLANNING_ASSISTANCE_UNSPECIFIED":   0,
		"MEAL_PLANNING_ASSISTANCE_WANTS":         1,
		"MEAL_PLANNING_ASSISTANCE_DOES_NOT_WANT": 2,
	}
)

func (x MealPlanningAssistance) Enum() *MealPlanningAssistance {
	p := new(MealPlanningAssistance)
	*p = x
	return p
}

func (x MealPlanningAssistance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MealPlanningAssistance) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[20].Descriptor()
}

func (MealPlanningAssistance) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[20]
}

func (x MealPlanningAssistance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MealPlanningAssistance.Descriptor instead.
func (MealPlanningAssistance) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{20}
}

type WeightLossProgramInterest int32

const (
	WeightLossProgramInterest_WEIGHT_LOSS_PROGRAM_INTEREST_UNSPECIFIED    WeightLossProgramInterest = 0
	WeightLossProgramInterest_WEIGHT_LOSS_PROGRAM_INTEREST_INTERESTED     WeightLossProgramInterest = 1
	WeightLossProgramInterest_WEIGHT_LOSS_PROGRAM_INTEREST_NOT_INTERESTED WeightLossProgramInterest = 2
)

// Enum value maps for WeightLossProgramInterest.
var (
	WeightLossProgramInterest_name = map[int32]string{
		0: "WEIGHT_LOSS_PROGRAM_INTEREST_UNSPECIFIED",
		1: "WEIGHT_LOSS_PROGRAM_INTEREST_INTERESTED",
		2: "WEIGHT_LOSS_PROGRAM_INTEREST_NOT_INTERESTED",
	}
	WeightLossProgramInterest_value = map[string]int32{
		"WEIGHT_LOSS_PROGRAM_INTEREST_UNSPECIFIED":    0,
		"WEIGHT_LOSS_PROGRAM_INTEREST_INTERESTED":     1,
		"WEIGHT_LOSS_PROGRAM_INTEREST_NOT_INTERESTED": 2,
	}
)

func (x WeightLossProgramInterest) Enum() *WeightLossProgramInterest {
	p := new(WeightLossProgramInterest)
	*p = x
	return p
}

func (x WeightLossProgramInterest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeightLossProgramInterest) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[21].Descriptor()
}

func (WeightLossProgramInterest) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[21]
}

func (x WeightLossProgramInterest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeightLossProgramInterest.Descriptor instead.
func (WeightLossProgramInterest) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{21}
}

type SnapStatus int32

const (
	SnapStatus_SNAP_STATUS_UNSPECIFIED SnapStatus = 0
	SnapStatus_SNAP_STATUS_ON_SNAP     SnapStatus = 1
	SnapStatus_SNAP_STATUS_NOT_ON_SNAP SnapStatus = 2
)

// Enum value maps for SnapStatus.
var (
	SnapStatus_name = map[int32]string{
		0: "SNAP_STATUS_UNSPECIFIED",
		1: "SNAP_STATUS_ON_SNAP",
		2: "SNAP_STATUS_NOT_ON_SNAP",
	}
	SnapStatus_value = map[string]int32{
		"SNAP_STATUS_UNSPECIFIED": 0,
		"SNAP_STATUS_ON_SNAP":     1,
		"SNAP_STATUS_NOT_ON_SNAP": 2,
	}
)

func (x SnapStatus) Enum() *SnapStatus {
	p := new(SnapStatus)
	*p = x
	return p
}

func (x SnapStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnapStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[22].Descriptor()
}

func (SnapStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[22]
}

func (x SnapStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnapStatus.Descriptor instead.
func (SnapStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{22}
}

type FinancialAssistanceStatus int32

const (
	FinancialAssistanceStatus_FINANCIAL_ASSISTANCE_STATUS_UNSPECIFIED                   FinancialAssistanceStatus = 0
	FinancialAssistanceStatus_FINANCIAL_ASSISTANCE_STATUS_RECEIVES_FINANCIAL_ASSISTANCE FinancialAssistanceStatus = 1
	FinancialAssistanceStatus_FINANCIAL_ASSISTANCE_STATUS_NO_FINANCIAL_ASSISTANCE       FinancialAssistanceStatus = 2
)

// Enum value maps for FinancialAssistanceStatus.
var (
	FinancialAssistanceStatus_name = map[int32]string{
		0: "FINANCIAL_ASSISTANCE_STATUS_UNSPECIFIED",
		1: "FINANCIAL_ASSISTANCE_STATUS_RECEIVES_FINANCIAL_ASSISTANCE",
		2: "FINANCIAL_ASSISTANCE_STATUS_NO_FINANCIAL_ASSISTANCE",
	}
	FinancialAssistanceStatus_value = map[string]int32{
		"FINANCIAL_ASSISTANCE_STATUS_UNSPECIFIED":                   0,
		"FINANCIAL_ASSISTANCE_STATUS_RECEIVES_FINANCIAL_ASSISTANCE": 1,
		"FINANCIAL_ASSISTANCE_STATUS_NO_FINANCIAL_ASSISTANCE":       2,
	}
)

func (x FinancialAssistanceStatus) Enum() *FinancialAssistanceStatus {
	p := new(FinancialAssistanceStatus)
	*p = x
	return p
}

func (x FinancialAssistanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialAssistanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[23].Descriptor()
}

func (FinancialAssistanceStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[23]
}

func (x FinancialAssistanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialAssistanceStatus.Descriptor instead.
func (FinancialAssistanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{23}
}

type FoodInsecurity int32

const (
	FoodInsecurity_FOOD_INSECURITY_UNSPECIFIED FoodInsecurity = 0
	FoodInsecurity_FOOD_INSECURITY_INSECURE    FoodInsecurity = 1
	FoodInsecurity_FOOD_INSECURITY_SECURE      FoodInsecurity = 2
)

// Enum value maps for FoodInsecurity.
var (
	FoodInsecurity_name = map[int32]string{
		0: "FOOD_INSECURITY_UNSPECIFIED",
		1: "FOOD_INSECURITY_INSECURE",
		2: "FOOD_INSECURITY_SECURE",
	}
	FoodInsecurity_value = map[string]int32{
		"FOOD_INSECURITY_UNSPECIFIED": 0,
		"FOOD_INSECURITY_INSECURE":    1,
		"FOOD_INSECURITY_SECURE":      2,
	}
)

func (x FoodInsecurity) Enum() *FoodInsecurity {
	p := new(FoodInsecurity)
	*p = x
	return p
}

func (x FoodInsecurity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FoodInsecurity) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[24].Descriptor()
}

func (FoodInsecurity) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[24]
}

func (x FoodInsecurity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FoodInsecurity.Descriptor instead.
func (FoodInsecurity) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{24}
}

type DepressionFrequency int32

const (
	DepressionFrequency_DEPRESSION_FREQUENCY_UNSPECIFIED DepressionFrequency = 0
	DepressionFrequency_DEPRESSION_FREQUENCY_FREQUENT    DepressionFrequency = 1
	DepressionFrequency_DEPRESSION_FREQUENCY_INFREQUENT  DepressionFrequency = 2
)

// Enum value maps for DepressionFrequency.
var (
	DepressionFrequency_name = map[int32]string{
		0: "DEPRESSION_FREQUENCY_UNSPECIFIED",
		1: "DEPRESSION_FREQUENCY_FREQUENT",
		2: "DEPRESSION_FREQUENCY_INFREQUENT",
	}
	DepressionFrequency_value = map[string]int32{
		"DEPRESSION_FREQUENCY_UNSPECIFIED": 0,
		"DEPRESSION_FREQUENCY_FREQUENT":    1,
		"DEPRESSION_FREQUENCY_INFREQUENT":  2,
	}
)

func (x DepressionFrequency) Enum() *DepressionFrequency {
	p := new(DepressionFrequency)
	*p = x
	return p
}

func (x DepressionFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepressionFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[25].Descriptor()
}

func (DepressionFrequency) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes[25]
}

func (x DepressionFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepressionFrequency.Descriptor instead.
func (DepressionFrequency) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{25}
}

type PatientSdohQuestionnaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                               string                                  `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	PatientSdohQuestionnaireId              string                                  `protobuf:"bytes,2,opt,name=patient_sdoh_questionnaire_id,json=patientSdohQuestionnaireId,proto3" json:"patient_sdoh_questionnaire_id,omitempty"`
	QuestionnaireLanguage                   enums.Language                          `protobuf:"varint,3,opt,name=questionnaire_language,json=questionnaireLanguage,proto3,enum=heyrenee.v1.enums.Language" json:"questionnaire_language,omitempty"`
	DateTimeAnswered                        *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=date_time_answered,json=dateTimeAnswered,proto3" json:"date_time_answered,omitempty"`
	AmbulatoryStatus                        AmbulatoryStatus                        `protobuf:"varint,5,opt,name=ambulatory_status,json=ambulatoryStatus,proto3,enum=heyrenee.v1.messages.AmbulatoryStatus" json:"ambulatory_status,omitempty"`
	FallHistory                             FallHistory                             `protobuf:"varint,6,opt,name=fall_history,json=fallHistory,proto3,enum=heyrenee.v1.messages.FallHistory" json:"fall_history,omitempty"`
	WalkingSteadiness                       WalkingSteadiness                       `protobuf:"varint,7,opt,name=walking_steadiness,json=walkingSteadiness,proto3,enum=heyrenee.v1.messages.WalkingSteadiness" json:"walking_steadiness,omitempty"`
	WalkingSupportNecessity                 WalkingSupportNecessity                 `protobuf:"varint,8,opt,name=walking_support_necessity,json=walkingSupportNecessity,proto3,enum=heyrenee.v1.messages.WalkingSupportNecessity" json:"walking_support_necessity,omitempty"`
	WalkingAssistanceAdvisory               WalkingAssistanceAdvisory               `protobuf:"varint,9,opt,name=walking_assistance_advisory,json=walkingAssistanceAdvisory,proto3,enum=heyrenee.v1.messages.WalkingAssistanceAdvisory" json:"walking_assistance_advisory,omitempty"`
	WalkingAssistanceOwnership              WalkingAssistanceOwnership              `protobuf:"varint,10,opt,name=walking_assistance_ownership,json=walkingAssistanceOwnership,proto3,enum=heyrenee.v1.messages.WalkingAssistanceOwnership" json:"walking_assistance_ownership,omitempty"`
	FallingWorry                            FallingWorry                            `protobuf:"varint,11,opt,name=falling_worry,json=fallingWorry,proto3,enum=heyrenee.v1.messages.FallingWorry" json:"falling_worry,omitempty"`
	StandingUpAssistance                    StandingUpAssistance                    `protobuf:"varint,12,opt,name=standing_up_assistance,json=standingUpAssistance,proto3,enum=heyrenee.v1.messages.StandingUpAssistance" json:"standing_up_assistance,omitempty"`
	SteppingUpDifficulty                    SteppingUpDifficulty                    `protobuf:"varint,13,opt,name=stepping_up_difficulty,json=steppingUpDifficulty,proto3,enum=heyrenee.v1.messages.SteppingUpDifficulty" json:"stepping_up_difficulty,omitempty"`
	FeelingInFeetStatus                     FeelingInFeetStatus                     `protobuf:"varint,14,opt,name=feeling_in_feet_status,json=feelingInFeetStatus,proto3,enum=heyrenee.v1.messages.FeelingInFeetStatus" json:"feeling_in_feet_status,omitempty"`
	FeelingLightheadedFromMedsStatus        FeelingLightheadedFromMedsStatus        `protobuf:"varint,15,opt,name=feeling_lightheaded_from_meds_status,json=feelingLightheadedFromMedsStatus,proto3,enum=heyrenee.v1.messages.FeelingLightheadedFromMedsStatus" json:"feeling_lightheaded_from_meds_status,omitempty"`
	SmokingStatus                           SmokingStatus                           `protobuf:"varint,16,opt,name=smoking_status,json=smokingStatus,proto3,enum=heyrenee.v1.messages.SmokingStatus" json:"smoking_status,omitempty"`
	AmountSmoked                            string                                  `protobuf:"bytes,17,opt,name=amount_smoked,json=amountSmoked,proto3" json:"amount_smoked,omitempty"`
	QuitSmokingStatus                       QuitSmokingStatus                       `protobuf:"varint,18,opt,name=quit_smoking_status,json=quitSmokingStatus,proto3,enum=heyrenee.v1.messages.QuitSmokingStatus" json:"quit_smoking_status,omitempty"`
	AlcoholDrinkingStatus                   AlcoholDrinkingStatus                   `protobuf:"varint,19,opt,name=alcohol_drinking_status,json=alcoholDrinkingStatus,proto3,enum=heyrenee.v1.messages.AlcoholDrinkingStatus" json:"alcohol_drinking_status,omitempty"`
	AmountAlcoholDrank                      string                                  `protobuf:"bytes,20,opt,name=amount_alcohol_drank,json=amountAlcoholDrank,proto3" json:"amount_alcohol_drank,omitempty"`
	QuitDrinkingStatus                      QuitDrinkingStatus                      `protobuf:"varint,21,opt,name=quit_drinking_status,json=quitDrinkingStatus,proto3,enum=heyrenee.v1.messages.QuitDrinkingStatus" json:"quit_drinking_status,omitempty"`
	SchedulingDoctorsAppointmentsDifficulty SchedulingDoctorsAppointmentsDifficulty `protobuf:"varint,22,opt,name=scheduling_doctors_appointments_difficulty,json=schedulingDoctorsAppointmentsDifficulty,proto3,enum=heyrenee.v1.messages.SchedulingDoctorsAppointmentsDifficulty" json:"scheduling_doctors_appointments_difficulty,omitempty"`
	GettingToDoctorsAppointmentsDifficulty  GettingToDoctorsAppointmentsDifficulty  `protobuf:"varint,23,opt,name=getting_to_doctors_appointments_difficulty,json=gettingToDoctorsAppointmentsDifficulty,proto3,enum=heyrenee.v1.messages.GettingToDoctorsAppointmentsDifficulty" json:"getting_to_doctors_appointments_difficulty,omitempty"`
	AdlHelpNecessity                        AdlHelpNecessity                        `protobuf:"varint,24,opt,name=adl_help_necessity,json=adlHelpNecessity,proto3,enum=heyrenee.v1.messages.AdlHelpNecessity" json:"adl_help_necessity,omitempty"`
	GettingToGroceryStoreDifficulty         GettingToGroceryStoreDifficulty         `protobuf:"varint,25,opt,name=getting_to_grocery_store_difficulty,json=gettingToGroceryStoreDifficulty,proto3,enum=heyrenee.v1.messages.GettingToGroceryStoreDifficulty" json:"getting_to_grocery_store_difficulty,omitempty"`
	SocialIsolation                         SocialIsolation                         `protobuf:"varint,26,opt,name=social_isolation,json=socialIsolation,proto3,enum=heyrenee.v1.messages.SocialIsolation" json:"social_isolation,omitempty"`
	MealPlanningAssistance                  MealPlanningAssistance                  `protobuf:"varint,27,opt,name=meal_planning_assistance,json=mealPlanningAssistance,proto3,enum=heyrenee.v1.messages.MealPlanningAssistance" json:"meal_planning_assistance,omitempty"`
	WeightLossProgramInterest               WeightLossProgramInterest               `protobuf:"varint,28,opt,name=weight_loss_program_interest,json=weightLossProgramInterest,proto3,enum=heyrenee.v1.messages.WeightLossProgramInterest" json:"weight_loss_program_interest,omitempty"`
	SnapStatus                              SnapStatus                              `protobuf:"varint,29,opt,name=snap_status,json=snapStatus,proto3,enum=heyrenee.v1.messages.SnapStatus" json:"snap_status,omitempty"`
	FinancialAssistanceStatus               FinancialAssistanceStatus               `protobuf:"varint,30,opt,name=financial_assistance_status,json=financialAssistanceStatus,proto3,enum=heyrenee.v1.messages.FinancialAssistanceStatus" json:"financial_assistance_status,omitempty"`
	FoodInsecurity                          FoodInsecurity                          `protobuf:"varint,31,opt,name=food_insecurity,json=foodInsecurity,proto3,enum=heyrenee.v1.messages.FoodInsecurity" json:"food_insecurity,omitempty"`
	DepressionFrequency                     DepressionFrequency                     `protobuf:"varint,32,opt,name=depression_frequency,json=depressionFrequency,proto3,enum=heyrenee.v1.messages.DepressionFrequency" json:"depression_frequency,omitempty"`
}

func (x *PatientSdohQuestionnaire) Reset() {
	*x = PatientSdohQuestionnaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientSdohQuestionnaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientSdohQuestionnaire) ProtoMessage() {}

func (x *PatientSdohQuestionnaire) ProtoReflect() protoreflect.Message {
	mi := &file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientSdohQuestionnaire.ProtoReflect.Descriptor instead.
func (*PatientSdohQuestionnaire) Descriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP(), []int{0}
}

func (x *PatientSdohQuestionnaire) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PatientSdohQuestionnaire) GetPatientSdohQuestionnaireId() string {
	if x != nil {
		return x.PatientSdohQuestionnaireId
	}
	return ""
}

func (x *PatientSdohQuestionnaire) GetQuestionnaireLanguage() enums.Language {
	if x != nil {
		return x.QuestionnaireLanguage
	}
	return enums.Language(0)
}

func (x *PatientSdohQuestionnaire) GetDateTimeAnswered() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTimeAnswered
	}
	return nil
}

func (x *PatientSdohQuestionnaire) GetAmbulatoryStatus() AmbulatoryStatus {
	if x != nil {
		return x.AmbulatoryStatus
	}
	return AmbulatoryStatus_AMBULATORY_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetFallHistory() FallHistory {
	if x != nil {
		return x.FallHistory
	}
	return FallHistory_FALL_HISTORY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetWalkingSteadiness() WalkingSteadiness {
	if x != nil {
		return x.WalkingSteadiness
	}
	return WalkingSteadiness_WALKING_STEADINESS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetWalkingSupportNecessity() WalkingSupportNecessity {
	if x != nil {
		return x.WalkingSupportNecessity
	}
	return WalkingSupportNecessity_WALKING_SUPPORT_NECESSITY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetWalkingAssistanceAdvisory() WalkingAssistanceAdvisory {
	if x != nil {
		return x.WalkingAssistanceAdvisory
	}
	return WalkingAssistanceAdvisory_WALKING_ASSISTANCE_ADVISORY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetWalkingAssistanceOwnership() WalkingAssistanceOwnership {
	if x != nil {
		return x.WalkingAssistanceOwnership
	}
	return WalkingAssistanceOwnership_WALKING_ASSISTANCE_OWNERSHIP_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetFallingWorry() FallingWorry {
	if x != nil {
		return x.FallingWorry
	}
	return FallingWorry_FALLING_WORRY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetStandingUpAssistance() StandingUpAssistance {
	if x != nil {
		return x.StandingUpAssistance
	}
	return StandingUpAssistance_STANDING_UP_ASSISTANCE_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetSteppingUpDifficulty() SteppingUpDifficulty {
	if x != nil {
		return x.SteppingUpDifficulty
	}
	return SteppingUpDifficulty_STEPPING_UP_DIFFICULTY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetFeelingInFeetStatus() FeelingInFeetStatus {
	if x != nil {
		return x.FeelingInFeetStatus
	}
	return FeelingInFeetStatus_FEELING_IN_FEET_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetFeelingLightheadedFromMedsStatus() FeelingLightheadedFromMedsStatus {
	if x != nil {
		return x.FeelingLightheadedFromMedsStatus
	}
	return FeelingLightheadedFromMedsStatus_FEELING_LIGHTHEADED_FROM_MEDS_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetSmokingStatus() SmokingStatus {
	if x != nil {
		return x.SmokingStatus
	}
	return SmokingStatus_SMOKING_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetAmountSmoked() string {
	if x != nil {
		return x.AmountSmoked
	}
	return ""
}

func (x *PatientSdohQuestionnaire) GetQuitSmokingStatus() QuitSmokingStatus {
	if x != nil {
		return x.QuitSmokingStatus
	}
	return QuitSmokingStatus_QUIT_SMOKING_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetAlcoholDrinkingStatus() AlcoholDrinkingStatus {
	if x != nil {
		return x.AlcoholDrinkingStatus
	}
	return AlcoholDrinkingStatus_ALCOHOL_DRINKING_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetAmountAlcoholDrank() string {
	if x != nil {
		return x.AmountAlcoholDrank
	}
	return ""
}

func (x *PatientSdohQuestionnaire) GetQuitDrinkingStatus() QuitDrinkingStatus {
	if x != nil {
		return x.QuitDrinkingStatus
	}
	return QuitDrinkingStatus_QUIT_DRINKING_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetSchedulingDoctorsAppointmentsDifficulty() SchedulingDoctorsAppointmentsDifficulty {
	if x != nil {
		return x.SchedulingDoctorsAppointmentsDifficulty
	}
	return SchedulingDoctorsAppointmentsDifficulty_SCHEDULING_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetGettingToDoctorsAppointmentsDifficulty() GettingToDoctorsAppointmentsDifficulty {
	if x != nil {
		return x.GettingToDoctorsAppointmentsDifficulty
	}
	return GettingToDoctorsAppointmentsDifficulty_GETTING_TO_DOCTORS_APPOINTMENTS_DIFFICULTY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetAdlHelpNecessity() AdlHelpNecessity {
	if x != nil {
		return x.AdlHelpNecessity
	}
	return AdlHelpNecessity_ADL_HELP_NECESSITY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetGettingToGroceryStoreDifficulty() GettingToGroceryStoreDifficulty {
	if x != nil {
		return x.GettingToGroceryStoreDifficulty
	}
	return GettingToGroceryStoreDifficulty_GETTING_TO_GROCERY_STORE_DIFFICULTY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetSocialIsolation() SocialIsolation {
	if x != nil {
		return x.SocialIsolation
	}
	return SocialIsolation_SOCIAL_ISOLATION_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetMealPlanningAssistance() MealPlanningAssistance {
	if x != nil {
		return x.MealPlanningAssistance
	}
	return MealPlanningAssistance_MEAL_PLANNING_ASSISTANCE_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetWeightLossProgramInterest() WeightLossProgramInterest {
	if x != nil {
		return x.WeightLossProgramInterest
	}
	return WeightLossProgramInterest_WEIGHT_LOSS_PROGRAM_INTEREST_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetSnapStatus() SnapStatus {
	if x != nil {
		return x.SnapStatus
	}
	return SnapStatus_SNAP_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetFinancialAssistanceStatus() FinancialAssistanceStatus {
	if x != nil {
		return x.FinancialAssistanceStatus
	}
	return FinancialAssistanceStatus_FINANCIAL_ASSISTANCE_STATUS_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetFoodInsecurity() FoodInsecurity {
	if x != nil {
		return x.FoodInsecurity
	}
	return FoodInsecurity_FOOD_INSECURITY_UNSPECIFIED
}

func (x *PatientSdohQuestionnaire) GetDepressionFrequency() DepressionFrequency {
	if x != nil {
		return x.DepressionFrequency
	}
	return DepressionFrequency_DEPRESSION_FREQUENCY_UNSPECIFIED
}

var File_heyrenee_v1_messages_patient_sdoh_questionnaire_proto protoreflect.FileDescriptor

var file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDesc = []byte{
	0x0a, 0x35, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x64, 0x6f, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1e, 0x68,
	0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x68,
	0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb7, 0x17, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x64, 0x6f, 0x68,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x64,
	0x6f, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x64, 0x6f, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x66, 0x61, 0x6c, 0x6c,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0b, 0x66, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x56,
	0x0a, 0x12, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x65, 0x79,
	0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x11, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x65, 0x79, 0x72,
	0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x65, 0x63, 0x65, 0x73, 0x73, 0x69, 0x74, 0x79, 0x52, 0x17, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x6f, 0x0a, 0x1b, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x61,
	0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x19, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x12, 0x72, 0x0a, 0x1c, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65,
	0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x1a, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x6f, 0x72, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x72,
	0x79, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x72, 0x79, 0x12,
	0x60, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55,
	0x70, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x14, 0x73,
	0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x16, 0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x46, 0x65, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13,
	0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x46, 0x65, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x24, 0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6d, 0x65, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x65, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x20, 0x66, 0x65, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0e,
	0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6d, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x6d, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x57, 0x0a,
	0x13, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x65, 0x79,
	0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x11, 0x71, 0x75, 0x69, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f,
	0x6c, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x64, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x5a, 0x0a,
	0x14, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x65,
	0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x71, 0x75, 0x69, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x2a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x27, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x2a, 0x67, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x65,
	0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x26, 0x67, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x64, 0x6c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6e, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x4e, 0x65, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x64, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x4e, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x74, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x23, 0x67, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x1f, 0x67, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x50, 0x0a,
	0x10, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x66, 0x0a, 0x18, 0x6d, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x16, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x1c, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x19,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6f, 0x0a, 0x1b,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a,
	0x0f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x66, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x14,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x79,
	0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x13, 0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2a, 0x80, 0x01, 0x0a, 0x10, 0x41,
	0x6d, 0x62, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x4d, 0x42, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4d, 0x42, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4d, 0x42, 0x55, 0x4c,
	0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4d, 0x42, 0x55, 0x4c,
	0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x4d, 0x42, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x2a, 0x72, 0x0a,
	0x0b, 0x46, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x10,
	0x02, 0x2a, 0x7d, 0x0a, 0x11, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41,
	0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x46, 0x45, 0x45, 0x4c, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x45,
	0x41, 0x44, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02,
	0x2a, 0x96, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x25,
	0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x4c, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x9e, 0x01, 0x0a, 0x19, 0x57, 0x61,
	0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x41, 0x4c, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44,
	0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4b,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x1a, 0x57,
	0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x4c,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x41, 0x4c, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x45, 0x5f, 0x4f, 0x52, 0x5f,
	0x57, 0x41, 0x4c, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41, 0x4c, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a,
	0x6a, 0x0a, 0x0c, 0x46, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x52, 0x59, 0x5f,
	0x49, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x52, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x57, 0x4f, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x14,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x50, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02,
	0x2a, 0x8a, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x45,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55,
	0x4c, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x45, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50,
	0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x54, 0x45, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x46, 0x46,
	0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x87, 0x01,
	0x0a, 0x13, 0x46, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x46, 0x65, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x45, 0x45, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x46, 0x45, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x4f, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x45, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x5f, 0x46, 0x45, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x20, 0x46, 0x65, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x30,
	0x46, 0x45, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x44, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x46, 0x45, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x48, 0x45, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d,
	0x45, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x5f, 0x4c, 0x45,
	0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x46, 0x45, 0x45,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x48, 0x45, 0x41, 0x44, 0x45, 0x44,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x44, 0x53, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x0d, 0x53,
	0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x4d, 0x4f, 0x4b, 0x45, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4d, 0x4f, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x45, 0x10, 0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x11, 0x51,
	0x75, 0x69, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x4d,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x4e,
	0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29,
	0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x90, 0x01, 0x0a, 0x15,
	0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c,
	0x5f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x5f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x53,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x5f, 0x44, 0x52,
	0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x2a, 0x92,
	0x01, 0x0a, 0x12, 0x51, 0x75, 0x69, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x44, 0x52,
	0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x51,
	0x55, 0x49, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x4e,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x49,
	0x54, 0x10, 0x02, 0x2a, 0xe2, 0x01, 0x0a, 0x27, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x36, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f,
	0x43, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x39, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x43, 0x54, 0x4f, 0x52,
	0x53, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x44,
	0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x01, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x43, 0x54, 0x4f, 0x52, 0x53,
	0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x46, 0x46,
	0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x02, 0x2a, 0xe7, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x36, 0x47, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x4f, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x43, 0x0a, 0x3f, 0x47, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f,
	0x43, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x54, 0x52,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49,
	0x44, 0x45, 0x10, 0x01, 0x12, 0x3c, 0x0a, 0x38, 0x47, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c,
	0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59,
	0x10, 0x02, 0x2a, 0x78, 0x0a, 0x10, 0x41, 0x64, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x4e, 0x65, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x4c, 0x5f, 0x48, 0x45,
	0x4c, 0x50, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44,
	0x4c, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x4c,
	0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xc0, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x33, 0x0a, 0x2f, 0x47, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x47,
	0x52, 0x4f, 0x43, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x46,
	0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x47, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x43, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x47,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x43, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c,
	0x54, 0x59, 0x5f, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a,
	0x85, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x4c, 0x53, 0x5f,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x4c, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x92, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0xa7, 0x01, 0x0a,
	0x19, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0a, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4e, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4e, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4e,
	0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x10, 0x02, 0x2a, 0xc0, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x3d, 0x0a, 0x39, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x0e, 0x46, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x1b,
	0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x3a, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x65, 0x79, 0x52,
	0x65, 0x6e, 0x65, 0x65, 0x49, 0x6e, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescOnce sync.Once
	file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescData = file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDesc
)

func file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescGZIP() []byte {
	file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescOnce.Do(func() {
		file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescData)
	})
	return file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDescData
}

var file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes = make([]protoimpl.EnumInfo, 26)
var file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_goTypes = []interface{}{
	(AmbulatoryStatus)(0),                        // 0: heyrenee.v1.messages.AmbulatoryStatus
	(FallHistory)(0),                             // 1: heyrenee.v1.messages.FallHistory
	(WalkingSteadiness)(0),                       // 2: heyrenee.v1.messages.WalkingSteadiness
	(WalkingSupportNecessity)(0),                 // 3: heyrenee.v1.messages.WalkingSupportNecessity
	(WalkingAssistanceAdvisory)(0),               // 4: heyrenee.v1.messages.WalkingAssistanceAdvisory
	(WalkingAssistanceOwnership)(0),              // 5: heyrenee.v1.messages.WalkingAssistanceOwnership
	(FallingWorry)(0),                            // 6: heyrenee.v1.messages.FallingWorry
	(StandingUpAssistance)(0),                    // 7: heyrenee.v1.messages.StandingUpAssistance
	(SteppingUpDifficulty)(0),                    // 8: heyrenee.v1.messages.SteppingUpDifficulty
	(FeelingInFeetStatus)(0),                     // 9: heyrenee.v1.messages.FeelingInFeetStatus
	(FeelingLightheadedFromMedsStatus)(0),        // 10: heyrenee.v1.messages.FeelingLightheadedFromMedsStatus
	(SmokingStatus)(0),                           // 11: heyrenee.v1.messages.SmokingStatus
	(QuitSmokingStatus)(0),                       // 12: heyrenee.v1.messages.QuitSmokingStatus
	(AlcoholDrinkingStatus)(0),                   // 13: heyrenee.v1.messages.AlcoholDrinkingStatus
	(QuitDrinkingStatus)(0),                      // 14: heyrenee.v1.messages.QuitDrinkingStatus
	(SchedulingDoctorsAppointmentsDifficulty)(0), // 15: heyrenee.v1.messages.SchedulingDoctorsAppointmentsDifficulty
	(GettingToDoctorsAppointmentsDifficulty)(0),  // 16: heyrenee.v1.messages.GettingToDoctorsAppointmentsDifficulty
	(AdlHelpNecessity)(0),                        // 17: heyrenee.v1.messages.AdlHelpNecessity
	(GettingToGroceryStoreDifficulty)(0),         // 18: heyrenee.v1.messages.GettingToGroceryStoreDifficulty
	(SocialIsolation)(0),                         // 19: heyrenee.v1.messages.SocialIsolation
	(MealPlanningAssistance)(0),                  // 20: heyrenee.v1.messages.MealPlanningAssistance
	(WeightLossProgramInterest)(0),               // 21: heyrenee.v1.messages.WeightLossProgramInterest
	(SnapStatus)(0),                              // 22: heyrenee.v1.messages.SnapStatus
	(FinancialAssistanceStatus)(0),               // 23: heyrenee.v1.messages.FinancialAssistanceStatus
	(FoodInsecurity)(0),                          // 24: heyrenee.v1.messages.FoodInsecurity
	(DepressionFrequency)(0),                     // 25: heyrenee.v1.messages.DepressionFrequency
	(*PatientSdohQuestionnaire)(nil),             // 26: heyrenee.v1.messages.PatientSdohQuestionnaire
	(enums.Language)(0),                          // 27: heyrenee.v1.enums.Language
	(*timestamppb.Timestamp)(nil),                // 28: google.protobuf.Timestamp
}
var file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_depIdxs = []int32{
	27, // 0: heyrenee.v1.messages.PatientSdohQuestionnaire.questionnaire_language:type_name -> heyrenee.v1.enums.Language
	28, // 1: heyrenee.v1.messages.PatientSdohQuestionnaire.date_time_answered:type_name -> google.protobuf.Timestamp
	0,  // 2: heyrenee.v1.messages.PatientSdohQuestionnaire.ambulatory_status:type_name -> heyrenee.v1.messages.AmbulatoryStatus
	1,  // 3: heyrenee.v1.messages.PatientSdohQuestionnaire.fall_history:type_name -> heyrenee.v1.messages.FallHistory
	2,  // 4: heyrenee.v1.messages.PatientSdohQuestionnaire.walking_steadiness:type_name -> heyrenee.v1.messages.WalkingSteadiness
	3,  // 5: heyrenee.v1.messages.PatientSdohQuestionnaire.walking_support_necessity:type_name -> heyrenee.v1.messages.WalkingSupportNecessity
	4,  // 6: heyrenee.v1.messages.PatientSdohQuestionnaire.walking_assistance_advisory:type_name -> heyrenee.v1.messages.WalkingAssistanceAdvisory
	5,  // 7: heyrenee.v1.messages.PatientSdohQuestionnaire.walking_assistance_ownership:type_name -> heyrenee.v1.messages.WalkingAssistanceOwnership
	6,  // 8: heyrenee.v1.messages.PatientSdohQuestionnaire.falling_worry:type_name -> heyrenee.v1.messages.FallingWorry
	7,  // 9: heyrenee.v1.messages.PatientSdohQuestionnaire.standing_up_assistance:type_name -> heyrenee.v1.messages.StandingUpAssistance
	8,  // 10: heyrenee.v1.messages.PatientSdohQuestionnaire.stepping_up_difficulty:type_name -> heyrenee.v1.messages.SteppingUpDifficulty
	9,  // 11: heyrenee.v1.messages.PatientSdohQuestionnaire.feeling_in_feet_status:type_name -> heyrenee.v1.messages.FeelingInFeetStatus
	10, // 12: heyrenee.v1.messages.PatientSdohQuestionnaire.feeling_lightheaded_from_meds_status:type_name -> heyrenee.v1.messages.FeelingLightheadedFromMedsStatus
	11, // 13: heyrenee.v1.messages.PatientSdohQuestionnaire.smoking_status:type_name -> heyrenee.v1.messages.SmokingStatus
	12, // 14: heyrenee.v1.messages.PatientSdohQuestionnaire.quit_smoking_status:type_name -> heyrenee.v1.messages.QuitSmokingStatus
	13, // 15: heyrenee.v1.messages.PatientSdohQuestionnaire.alcohol_drinking_status:type_name -> heyrenee.v1.messages.AlcoholDrinkingStatus
	14, // 16: heyrenee.v1.messages.PatientSdohQuestionnaire.quit_drinking_status:type_name -> heyrenee.v1.messages.QuitDrinkingStatus
	15, // 17: heyrenee.v1.messages.PatientSdohQuestionnaire.scheduling_doctors_appointments_difficulty:type_name -> heyrenee.v1.messages.SchedulingDoctorsAppointmentsDifficulty
	16, // 18: heyrenee.v1.messages.PatientSdohQuestionnaire.getting_to_doctors_appointments_difficulty:type_name -> heyrenee.v1.messages.GettingToDoctorsAppointmentsDifficulty
	17, // 19: heyrenee.v1.messages.PatientSdohQuestionnaire.adl_help_necessity:type_name -> heyrenee.v1.messages.AdlHelpNecessity
	18, // 20: heyrenee.v1.messages.PatientSdohQuestionnaire.getting_to_grocery_store_difficulty:type_name -> heyrenee.v1.messages.GettingToGroceryStoreDifficulty
	19, // 21: heyrenee.v1.messages.PatientSdohQuestionnaire.social_isolation:type_name -> heyrenee.v1.messages.SocialIsolation
	20, // 22: heyrenee.v1.messages.PatientSdohQuestionnaire.meal_planning_assistance:type_name -> heyrenee.v1.messages.MealPlanningAssistance
	21, // 23: heyrenee.v1.messages.PatientSdohQuestionnaire.weight_loss_program_interest:type_name -> heyrenee.v1.messages.WeightLossProgramInterest
	22, // 24: heyrenee.v1.messages.PatientSdohQuestionnaire.snap_status:type_name -> heyrenee.v1.messages.SnapStatus
	23, // 25: heyrenee.v1.messages.PatientSdohQuestionnaire.financial_assistance_status:type_name -> heyrenee.v1.messages.FinancialAssistanceStatus
	24, // 26: heyrenee.v1.messages.PatientSdohQuestionnaire.food_insecurity:type_name -> heyrenee.v1.messages.FoodInsecurity
	25, // 27: heyrenee.v1.messages.PatientSdohQuestionnaire.depression_frequency:type_name -> heyrenee.v1.messages.DepressionFrequency
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_init() }
func file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_init() {
	if File_heyrenee_v1_messages_patient_sdoh_questionnaire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientSdohQuestionnaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDesc,
			NumEnums:      26,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_goTypes,
		DependencyIndexes: file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_depIdxs,
		EnumInfos:         file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_enumTypes,
		MessageInfos:      file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_msgTypes,
	}.Build()
	File_heyrenee_v1_messages_patient_sdoh_questionnaire_proto = out.File
	file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_rawDesc = nil
	file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_goTypes = nil
	file_heyrenee_v1_messages_patient_sdoh_questionnaire_proto_depIdxs = nil
}
