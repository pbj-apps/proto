// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: heyrenee/v1/messages/patient_health_questionnaire.proto

package messages

import (
	enums "github.com/HeyReneeInc/proto/golang/heyrenee/v1/enums"
	_ "github.com/HeyReneeInc/proto/golang/heyrenee/v1/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnnualWellnessVisitStatus int32

const (
	AnnualWellnessVisitStatus_ANNUAL_WELLNESS_VISIT_STATUS_UNSPECIFIED   AnnualWellnessVisitStatus = 0
	AnnualWellnessVisitStatus_ANNUAL_WELLNESS_VISIT_STATUS_COMPLETED     AnnualWellnessVisitStatus = 1
	AnnualWellnessVisitStatus_ANNUAL_WELLNESS_VISIT_STATUS_NOT_COMPLETED AnnualWellnessVisitStatus = 2
)

// Enum value maps for AnnualWellnessVisitStatus.
var (
	AnnualWellnessVisitStatus_name = map[int32]string{
		0: "ANNUAL_WELLNESS_VISIT_STATUS_UNSPECIFIED",
		1: "ANNUAL_WELLNESS_VISIT_STATUS_COMPLETED",
		2: "ANNUAL_WELLNESS_VISIT_STATUS_NOT_COMPLETED",
	}
	AnnualWellnessVisitStatus_value = map[string]int32{
		"ANNUAL_WELLNESS_VISIT_STATUS_UNSPECIFIED":   0,
		"ANNUAL_WELLNESS_VISIT_STATUS_COMPLETED":     1,
		"ANNUAL_WELLNESS_VISIT_STATUS_NOT_COMPLETED": 2,
	}
)

func (x AnnualWellnessVisitStatus) Enum() *AnnualWellnessVisitStatus {
	p := new(AnnualWellnessVisitStatus)
	*p = x
	return p
}

func (x AnnualWellnessVisitStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnualWellnessVisitStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[0].Descriptor()
}

func (AnnualWellnessVisitStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[0]
}

func (x AnnualWellnessVisitStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnualWellnessVisitStatus.Descriptor instead.
func (AnnualWellnessVisitStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{0}
}

type MammogramStatus int32

const (
	MammogramStatus_MAMMOGRAM_STATUS_UNSPECIFIED   MammogramStatus = 0
	MammogramStatus_MAMMOGRAM_STATUS_COMPLETED     MammogramStatus = 1
	MammogramStatus_MAMMOGRAM_STATUS_NOT_COMPLETED MammogramStatus = 2
)

// Enum value maps for MammogramStatus.
var (
	MammogramStatus_name = map[int32]string{
		0: "MAMMOGRAM_STATUS_UNSPECIFIED",
		1: "MAMMOGRAM_STATUS_COMPLETED",
		2: "MAMMOGRAM_STATUS_NOT_COMPLETED",
	}
	MammogramStatus_value = map[string]int32{
		"MAMMOGRAM_STATUS_UNSPECIFIED":   0,
		"MAMMOGRAM_STATUS_COMPLETED":     1,
		"MAMMOGRAM_STATUS_NOT_COMPLETED": 2,
	}
)

func (x MammogramStatus) Enum() *MammogramStatus {
	p := new(MammogramStatus)
	*p = x
	return p
}

func (x MammogramStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MammogramStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[1].Descriptor()
}

func (MammogramStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[1]
}

func (x MammogramStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MammogramStatus.Descriptor instead.
func (MammogramStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{1}
}

type ColorectalCancerScreenStatus int32

const (
	ColorectalCancerScreenStatus_COLORECTAL_CANCER_SCREEN_STATUS_UNSPECIFIED   ColorectalCancerScreenStatus = 0
	ColorectalCancerScreenStatus_COLORECTAL_CANCER_SCREEN_STATUS_COMPLETED     ColorectalCancerScreenStatus = 1
	ColorectalCancerScreenStatus_COLORECTAL_CANCER_SCREEN_STATUS_NOT_COMPLETED ColorectalCancerScreenStatus = 2
)

// Enum value maps for ColorectalCancerScreenStatus.
var (
	ColorectalCancerScreenStatus_name = map[int32]string{
		0: "COLORECTAL_CANCER_SCREEN_STATUS_UNSPECIFIED",
		1: "COLORECTAL_CANCER_SCREEN_STATUS_COMPLETED",
		2: "COLORECTAL_CANCER_SCREEN_STATUS_NOT_COMPLETED",
	}
	ColorectalCancerScreenStatus_value = map[string]int32{
		"COLORECTAL_CANCER_SCREEN_STATUS_UNSPECIFIED":   0,
		"COLORECTAL_CANCER_SCREEN_STATUS_COMPLETED":     1,
		"COLORECTAL_CANCER_SCREEN_STATUS_NOT_COMPLETED": 2,
	}
)

func (x ColorectalCancerScreenStatus) Enum() *ColorectalCancerScreenStatus {
	p := new(ColorectalCancerScreenStatus)
	*p = x
	return p
}

func (x ColorectalCancerScreenStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorectalCancerScreenStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[2].Descriptor()
}

func (ColorectalCancerScreenStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[2]
}

func (x ColorectalCancerScreenStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorectalCancerScreenStatus.Descriptor instead.
func (ColorectalCancerScreenStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{2}
}

type ColorectalCancerScreenType int32

const (
	ColorectalCancerScreenType_COLORECTAL_CANCER_SCREEN_TYPE_UNSPECIFIED ColorectalCancerScreenType = 0
	ColorectalCancerScreenType_COLORECTAL_CANCER_SCREEN_TYPE_FIT         ColorectalCancerScreenType = 1
	ColorectalCancerScreenType_COLORECTAL_CANCER_SCREEN_TYPE_COLOGUARD   ColorectalCancerScreenType = 2
	ColorectalCancerScreenType_COLORECTAL_CANCER_SCREEN_TYPE_COLONOSCOPY ColorectalCancerScreenType = 3
)

// Enum value maps for ColorectalCancerScreenType.
var (
	ColorectalCancerScreenType_name = map[int32]string{
		0: "COLORECTAL_CANCER_SCREEN_TYPE_UNSPECIFIED",
		1: "COLORECTAL_CANCER_SCREEN_TYPE_FIT",
		2: "COLORECTAL_CANCER_SCREEN_TYPE_COLOGUARD",
		3: "COLORECTAL_CANCER_SCREEN_TYPE_COLONOSCOPY",
	}
	ColorectalCancerScreenType_value = map[string]int32{
		"COLORECTAL_CANCER_SCREEN_TYPE_UNSPECIFIED": 0,
		"COLORECTAL_CANCER_SCREEN_TYPE_FIT":         1,
		"COLORECTAL_CANCER_SCREEN_TYPE_COLOGUARD":   2,
		"COLORECTAL_CANCER_SCREEN_TYPE_COLONOSCOPY": 3,
	}
)

func (x ColorectalCancerScreenType) Enum() *ColorectalCancerScreenType {
	p := new(ColorectalCancerScreenType)
	*p = x
	return p
}

func (x ColorectalCancerScreenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorectalCancerScreenType) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[3].Descriptor()
}

func (ColorectalCancerScreenType) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[3]
}

func (x ColorectalCancerScreenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorectalCancerScreenType.Descriptor instead.
func (ColorectalCancerScreenType) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{3}
}

type AnnualFluVaccineStatus int32

const (
	AnnualFluVaccineStatus_ANNUAL_FLU_VACCINE_STATUS_UNSPECIFIED   AnnualFluVaccineStatus = 0
	AnnualFluVaccineStatus_ANNUAL_FLU_VACCINE_STATUS_COMPLETED     AnnualFluVaccineStatus = 1
	AnnualFluVaccineStatus_ANNUAL_FLU_VACCINE_STATUS_NOT_COMPLETED AnnualFluVaccineStatus = 2
)

// Enum value maps for AnnualFluVaccineStatus.
var (
	AnnualFluVaccineStatus_name = map[int32]string{
		0: "ANNUAL_FLU_VACCINE_STATUS_UNSPECIFIED",
		1: "ANNUAL_FLU_VACCINE_STATUS_COMPLETED",
		2: "ANNUAL_FLU_VACCINE_STATUS_NOT_COMPLETED",
	}
	AnnualFluVaccineStatus_value = map[string]int32{
		"ANNUAL_FLU_VACCINE_STATUS_UNSPECIFIED":   0,
		"ANNUAL_FLU_VACCINE_STATUS_COMPLETED":     1,
		"ANNUAL_FLU_VACCINE_STATUS_NOT_COMPLETED": 2,
	}
)

func (x AnnualFluVaccineStatus) Enum() *AnnualFluVaccineStatus {
	p := new(AnnualFluVaccineStatus)
	*p = x
	return p
}

func (x AnnualFluVaccineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnualFluVaccineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[4].Descriptor()
}

func (AnnualFluVaccineStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[4]
}

func (x AnnualFluVaccineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnualFluVaccineStatus.Descriptor instead.
func (AnnualFluVaccineStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{4}
}

type PneumococcalVaccineStatus int32

const (
	PneumococcalVaccineStatus_PNEUMOCOCCAL_VACCINE_STATUS_UNSPECIFIED   PneumococcalVaccineStatus = 0
	PneumococcalVaccineStatus_PNEUMOCOCCAL_VACCINE_STATUS_COMPLETED     PneumococcalVaccineStatus = 1
	PneumococcalVaccineStatus_PNEUMOCOCCAL_VACCINE_STATUS_ONLY_ONE      PneumococcalVaccineStatus = 2
	PneumococcalVaccineStatus_PNEUMOCOCCAL_VACCINE_STATUS_NOT_COMPLETED PneumococcalVaccineStatus = 3
)

// Enum value maps for PneumococcalVaccineStatus.
var (
	PneumococcalVaccineStatus_name = map[int32]string{
		0: "PNEUMOCOCCAL_VACCINE_STATUS_UNSPECIFIED",
		1: "PNEUMOCOCCAL_VACCINE_STATUS_COMPLETED",
		2: "PNEUMOCOCCAL_VACCINE_STATUS_ONLY_ONE",
		3: "PNEUMOCOCCAL_VACCINE_STATUS_NOT_COMPLETED",
	}
	PneumococcalVaccineStatus_value = map[string]int32{
		"PNEUMOCOCCAL_VACCINE_STATUS_UNSPECIFIED":   0,
		"PNEUMOCOCCAL_VACCINE_STATUS_COMPLETED":     1,
		"PNEUMOCOCCAL_VACCINE_STATUS_ONLY_ONE":      2,
		"PNEUMOCOCCAL_VACCINE_STATUS_NOT_COMPLETED": 3,
	}
)

func (x PneumococcalVaccineStatus) Enum() *PneumococcalVaccineStatus {
	p := new(PneumococcalVaccineStatus)
	*p = x
	return p
}

func (x PneumococcalVaccineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PneumococcalVaccineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[5].Descriptor()
}

func (PneumococcalVaccineStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[5]
}

func (x PneumococcalVaccineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PneumococcalVaccineStatus.Descriptor instead.
func (PneumococcalVaccineStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{5}
}

type CovidVaccineStatus int32

const (
	CovidVaccineStatus_COVID_VACCINE_STATUS_UNSPECIFIED   CovidVaccineStatus = 0
	CovidVaccineStatus_COVID_VACCINE_STATUS_COMPLETED     CovidVaccineStatus = 1
	CovidVaccineStatus_COVID_VACCINE_STATUS_NOT_COMPLETED CovidVaccineStatus = 2
)

// Enum value maps for CovidVaccineStatus.
var (
	CovidVaccineStatus_name = map[int32]string{
		0: "COVID_VACCINE_STATUS_UNSPECIFIED",
		1: "COVID_VACCINE_STATUS_COMPLETED",
		2: "COVID_VACCINE_STATUS_NOT_COMPLETED",
	}
	CovidVaccineStatus_value = map[string]int32{
		"COVID_VACCINE_STATUS_UNSPECIFIED":   0,
		"COVID_VACCINE_STATUS_COMPLETED":     1,
		"COVID_VACCINE_STATUS_NOT_COMPLETED": 2,
	}
)

func (x CovidVaccineStatus) Enum() *CovidVaccineStatus {
	p := new(CovidVaccineStatus)
	*p = x
	return p
}

func (x CovidVaccineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CovidVaccineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[6].Descriptor()
}

func (CovidVaccineStatus) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[6]
}

func (x CovidVaccineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CovidVaccineStatus.Descriptor instead.
func (CovidVaccineStatus) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{6}
}

type PillSystemUsage int32

const (
	PillSystemUsage_PILL_SYSTEM_USAGE_NOT_SPECIFIED PillSystemUsage = 0
	PillSystemUsage_PILL_SYSTEM_USAGE_USES          PillSystemUsage = 1
	PillSystemUsage_PILL_SYSTEM_USAGE_DOES_NOT_USE  PillSystemUsage = 2
)

// Enum value maps for PillSystemUsage.
var (
	PillSystemUsage_name = map[int32]string{
		0: "PILL_SYSTEM_USAGE_NOT_SPECIFIED",
		1: "PILL_SYSTEM_USAGE_USES",
		2: "PILL_SYSTEM_USAGE_DOES_NOT_USE",
	}
	PillSystemUsage_value = map[string]int32{
		"PILL_SYSTEM_USAGE_NOT_SPECIFIED": 0,
		"PILL_SYSTEM_USAGE_USES":          1,
		"PILL_SYSTEM_USAGE_DOES_NOT_USE":  2,
	}
)

func (x PillSystemUsage) Enum() *PillSystemUsage {
	p := new(PillSystemUsage)
	*p = x
	return p
}

func (x PillSystemUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PillSystemUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[7].Descriptor()
}

func (PillSystemUsage) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[7]
}

func (x PillSystemUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PillSystemUsage.Descriptor instead.
func (PillSystemUsage) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{7}
}

type DailyMedicationDifficulty int32

const (
	DailyMedicationDifficulty_DAILY_MEDICATION_DIFFICULTY_NOT_SPECIFIED  DailyMedicationDifficulty = 0
	DailyMedicationDifficulty_DAILY_MEDICATION_DIFFICULTY_HAS_DIFFICULTY DailyMedicationDifficulty = 1
	DailyMedicationDifficulty_DAILY_MEDICATION_DIFFICULTY_NO_DIFFICULTY  DailyMedicationDifficulty = 2
)

// Enum value maps for DailyMedicationDifficulty.
var (
	DailyMedicationDifficulty_name = map[int32]string{
		0: "DAILY_MEDICATION_DIFFICULTY_NOT_SPECIFIED",
		1: "DAILY_MEDICATION_DIFFICULTY_HAS_DIFFICULTY",
		2: "DAILY_MEDICATION_DIFFICULTY_NO_DIFFICULTY",
	}
	DailyMedicationDifficulty_value = map[string]int32{
		"DAILY_MEDICATION_DIFFICULTY_NOT_SPECIFIED":  0,
		"DAILY_MEDICATION_DIFFICULTY_HAS_DIFFICULTY": 1,
		"DAILY_MEDICATION_DIFFICULTY_NO_DIFFICULTY":  2,
	}
)

func (x DailyMedicationDifficulty) Enum() *DailyMedicationDifficulty {
	p := new(DailyMedicationDifficulty)
	*p = x
	return p
}

func (x DailyMedicationDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DailyMedicationDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[8].Descriptor()
}

func (DailyMedicationDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[8]
}

func (x DailyMedicationDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DailyMedicationDifficulty.Descriptor instead.
func (DailyMedicationDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{8}
}

type MedicationCopayDifficulty int32

const (
	MedicationCopayDifficulty_MEDICATION_COPAY_DIFFICULTY_NOT_SPECIFIED  MedicationCopayDifficulty = 0
	MedicationCopayDifficulty_MEDICATION_COPAY_DIFFICULTY_HAS_DIFFICULTY MedicationCopayDifficulty = 1
	MedicationCopayDifficulty_MEDICATION_COPAY_DIFFICULTY_NO_DIFFICULTY  MedicationCopayDifficulty = 2
)

// Enum value maps for MedicationCopayDifficulty.
var (
	MedicationCopayDifficulty_name = map[int32]string{
		0: "MEDICATION_COPAY_DIFFICULTY_NOT_SPECIFIED",
		1: "MEDICATION_COPAY_DIFFICULTY_HAS_DIFFICULTY",
		2: "MEDICATION_COPAY_DIFFICULTY_NO_DIFFICULTY",
	}
	MedicationCopayDifficulty_value = map[string]int32{
		"MEDICATION_COPAY_DIFFICULTY_NOT_SPECIFIED":  0,
		"MEDICATION_COPAY_DIFFICULTY_HAS_DIFFICULTY": 1,
		"MEDICATION_COPAY_DIFFICULTY_NO_DIFFICULTY":  2,
	}
)

func (x MedicationCopayDifficulty) Enum() *MedicationCopayDifficulty {
	p := new(MedicationCopayDifficulty)
	*p = x
	return p
}

func (x MedicationCopayDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationCopayDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[9].Descriptor()
}

func (MedicationCopayDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[9]
}

func (x MedicationCopayDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationCopayDifficulty.Descriptor instead.
func (MedicationCopayDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{9}
}

type MedicationPaymentDifficulty int32

const (
	MedicationPaymentDifficulty_MEDICATION_PAYMENT_DIFFICULTY_NOT_SPECIFIED             MedicationPaymentDifficulty = 0
	MedicationPaymentDifficulty_MEDICATION_PAYMENT_DIFFICULTY_SKIPS_BECAUSE_CANT_AFFORD MedicationPaymentDifficulty = 1
	MedicationPaymentDifficulty_MEDICATION_PAYMENT_DIFFICULTY_NO_DIFFICULTY             MedicationPaymentDifficulty = 2
)

// Enum value maps for MedicationPaymentDifficulty.
var (
	MedicationPaymentDifficulty_name = map[int32]string{
		0: "MEDICATION_PAYMENT_DIFFICULTY_NOT_SPECIFIED",
		1: "MEDICATION_PAYMENT_DIFFICULTY_SKIPS_BECAUSE_CANT_AFFORD",
		2: "MEDICATION_PAYMENT_DIFFICULTY_NO_DIFFICULTY",
	}
	MedicationPaymentDifficulty_value = map[string]int32{
		"MEDICATION_PAYMENT_DIFFICULTY_NOT_SPECIFIED":             0,
		"MEDICATION_PAYMENT_DIFFICULTY_SKIPS_BECAUSE_CANT_AFFORD": 1,
		"MEDICATION_PAYMENT_DIFFICULTY_NO_DIFFICULTY":             2,
	}
)

func (x MedicationPaymentDifficulty) Enum() *MedicationPaymentDifficulty {
	p := new(MedicationPaymentDifficulty)
	*p = x
	return p
}

func (x MedicationPaymentDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationPaymentDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[10].Descriptor()
}

func (MedicationPaymentDifficulty) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes[10]
}

func (x MedicationPaymentDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationPaymentDifficulty.Descriptor instead.
func (MedicationPaymentDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{10}
}

type PatientHealthQuestionnaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId                      string                       `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	PatientHealthQuestionnaireId   string                       `protobuf:"bytes,2,opt,name=patient_health_questionnaire_id,json=patientHealthQuestionnaireId,proto3" json:"patient_health_questionnaire_id,omitempty"`
	QuestionnaireLanguage          enums.Language               `protobuf:"varint,3,opt,name=questionnaire_language,json=questionnaireLanguage,proto3,enum=heyrenee.v1.enums.Language" json:"questionnaire_language,omitempty"`
	DateTimeAnswered               *timestamppb.Timestamp       `protobuf:"bytes,4,opt,name=date_time_answered,json=dateTimeAnswered,proto3" json:"date_time_answered,omitempty"`
	AnnualWellnessVisitStatus      AnnualWellnessVisitStatus    `protobuf:"varint,5,opt,name=annual_wellness_visit_status,json=annualWellnessVisitStatus,proto3,enum=heyrenee.v1.messages.AnnualWellnessVisitStatus" json:"annual_wellness_visit_status,omitempty"`
	LastAnnualWellnessVisitDate    *timestamppb.Timestamp       `protobuf:"bytes,6,opt,name=last_annual_wellness_visit_date,json=lastAnnualWellnessVisitDate,proto3" json:"last_annual_wellness_visit_date,omitempty"`
	MammogramStatus                MammogramStatus              `protobuf:"varint,7,opt,name=mammogram_status,json=mammogramStatus,proto3,enum=heyrenee.v1.messages.MammogramStatus" json:"mammogram_status,omitempty"`
	LastMammogramDate              *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=last_mammogram_date,json=lastMammogramDate,proto3" json:"last_mammogram_date,omitempty"`
	ColorectalCancerScreenStatus   ColorectalCancerScreenStatus `protobuf:"varint,9,opt,name=colorectal_cancer_screen_status,json=colorectalCancerScreenStatus,proto3,enum=heyrenee.v1.messages.ColorectalCancerScreenStatus" json:"colorectal_cancer_screen_status,omitempty"`
	LastColorectalCancerScreenDate *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=last_colorectal_cancer_screen_date,json=lastColorectalCancerScreenDate,proto3" json:"last_colorectal_cancer_screen_date,omitempty"`
	LastColorectalCancerScreenType ColorectalCancerScreenType   `protobuf:"varint,11,opt,name=last_colorectal_cancer_screen_type,json=lastColorectalCancerScreenType,proto3,enum=heyrenee.v1.messages.ColorectalCancerScreenType" json:"last_colorectal_cancer_screen_type,omitempty"`
	AnnualFluVaccineStatus         AnnualFluVaccineStatus       `protobuf:"varint,12,opt,name=annual_flu_vaccine_status,json=annualFluVaccineStatus,proto3,enum=heyrenee.v1.messages.AnnualFluVaccineStatus" json:"annual_flu_vaccine_status,omitempty"`
	LastAnnualFluVaccineDate       *timestamppb.Timestamp       `protobuf:"bytes,13,opt,name=last_annual_flu_vaccine_date,json=lastAnnualFluVaccineDate,proto3" json:"last_annual_flu_vaccine_date,omitempty"`
	PneumococcalVaccineStatus      PneumococcalVaccineStatus    `protobuf:"varint,14,opt,name=pneumococcal_vaccine_status,json=pneumococcalVaccineStatus,proto3,enum=heyrenee.v1.messages.PneumococcalVaccineStatus" json:"pneumococcal_vaccine_status,omitempty"`
	CovidVaccineStatus             CovidVaccineStatus           `protobuf:"varint,15,opt,name=covid_vaccine_status,json=covidVaccineStatus,proto3,enum=heyrenee.v1.messages.CovidVaccineStatus" json:"covid_vaccine_status,omitempty"`
	LastCovidVaccineDate           *timestamppb.Timestamp       `protobuf:"bytes,16,opt,name=last_covid_vaccine_date,json=lastCovidVaccineDate,proto3" json:"last_covid_vaccine_date,omitempty"`
	PillSystemUsage                PillSystemUsage              `protobuf:"varint,17,opt,name=pill_system_usage,json=pillSystemUsage,proto3,enum=heyrenee.v1.messages.PillSystemUsage" json:"pill_system_usage,omitempty"`
	DailyMedicationDifficulty      DailyMedicationDifficulty    `protobuf:"varint,18,opt,name=daily_medication_difficulty,json=dailyMedicationDifficulty,proto3,enum=heyrenee.v1.messages.DailyMedicationDifficulty" json:"daily_medication_difficulty,omitempty"`
	MedicationCopayDifficulty      MedicationCopayDifficulty    `protobuf:"varint,19,opt,name=medication_copay_difficulty,json=medicationCopayDifficulty,proto3,enum=heyrenee.v1.messages.MedicationCopayDifficulty" json:"medication_copay_difficulty,omitempty"`
	MedicationPaymentDifficulty    MedicationPaymentDifficulty  `protobuf:"varint,20,opt,name=medication_payment_difficulty,json=medicationPaymentDifficulty,proto3,enum=heyrenee.v1.messages.MedicationPaymentDifficulty" json:"medication_payment_difficulty,omitempty"`
}

func (x *PatientHealthQuestionnaire) Reset() {
	*x = PatientHealthQuestionnaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyrenee_v1_messages_patient_health_questionnaire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientHealthQuestionnaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientHealthQuestionnaire) ProtoMessage() {}

func (x *PatientHealthQuestionnaire) ProtoReflect() protoreflect.Message {
	mi := &file_heyrenee_v1_messages_patient_health_questionnaire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientHealthQuestionnaire.ProtoReflect.Descriptor instead.
func (*PatientHealthQuestionnaire) Descriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP(), []int{0}
}

func (x *PatientHealthQuestionnaire) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PatientHealthQuestionnaire) GetPatientHealthQuestionnaireId() string {
	if x != nil {
		return x.PatientHealthQuestionnaireId
	}
	return ""
}

func (x *PatientHealthQuestionnaire) GetQuestionnaireLanguage() enums.Language {
	if x != nil {
		return x.QuestionnaireLanguage
	}
	return enums.Language(0)
}

func (x *PatientHealthQuestionnaire) GetDateTimeAnswered() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTimeAnswered
	}
	return nil
}

func (x *PatientHealthQuestionnaire) GetAnnualWellnessVisitStatus() AnnualWellnessVisitStatus {
	if x != nil {
		return x.AnnualWellnessVisitStatus
	}
	return AnnualWellnessVisitStatus_ANNUAL_WELLNESS_VISIT_STATUS_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetLastAnnualWellnessVisitDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAnnualWellnessVisitDate
	}
	return nil
}

func (x *PatientHealthQuestionnaire) GetMammogramStatus() MammogramStatus {
	if x != nil {
		return x.MammogramStatus
	}
	return MammogramStatus_MAMMOGRAM_STATUS_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetLastMammogramDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMammogramDate
	}
	return nil
}

func (x *PatientHealthQuestionnaire) GetColorectalCancerScreenStatus() ColorectalCancerScreenStatus {
	if x != nil {
		return x.ColorectalCancerScreenStatus
	}
	return ColorectalCancerScreenStatus_COLORECTAL_CANCER_SCREEN_STATUS_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetLastColorectalCancerScreenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastColorectalCancerScreenDate
	}
	return nil
}

func (x *PatientHealthQuestionnaire) GetLastColorectalCancerScreenType() ColorectalCancerScreenType {
	if x != nil {
		return x.LastColorectalCancerScreenType
	}
	return ColorectalCancerScreenType_COLORECTAL_CANCER_SCREEN_TYPE_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetAnnualFluVaccineStatus() AnnualFluVaccineStatus {
	if x != nil {
		return x.AnnualFluVaccineStatus
	}
	return AnnualFluVaccineStatus_ANNUAL_FLU_VACCINE_STATUS_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetLastAnnualFluVaccineDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAnnualFluVaccineDate
	}
	return nil
}

func (x *PatientHealthQuestionnaire) GetPneumococcalVaccineStatus() PneumococcalVaccineStatus {
	if x != nil {
		return x.PneumococcalVaccineStatus
	}
	return PneumococcalVaccineStatus_PNEUMOCOCCAL_VACCINE_STATUS_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetCovidVaccineStatus() CovidVaccineStatus {
	if x != nil {
		return x.CovidVaccineStatus
	}
	return CovidVaccineStatus_COVID_VACCINE_STATUS_UNSPECIFIED
}

func (x *PatientHealthQuestionnaire) GetLastCovidVaccineDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCovidVaccineDate
	}
	return nil
}

func (x *PatientHealthQuestionnaire) GetPillSystemUsage() PillSystemUsage {
	if x != nil {
		return x.PillSystemUsage
	}
	return PillSystemUsage_PILL_SYSTEM_USAGE_NOT_SPECIFIED
}

func (x *PatientHealthQuestionnaire) GetDailyMedicationDifficulty() DailyMedicationDifficulty {
	if x != nil {
		return x.DailyMedicationDifficulty
	}
	return DailyMedicationDifficulty_DAILY_MEDICATION_DIFFICULTY_NOT_SPECIFIED
}

func (x *PatientHealthQuestionnaire) GetMedicationCopayDifficulty() MedicationCopayDifficulty {
	if x != nil {
		return x.MedicationCopayDifficulty
	}
	return MedicationCopayDifficulty_MEDICATION_COPAY_DIFFICULTY_NOT_SPECIFIED
}

func (x *PatientHealthQuestionnaire) GetMedicationPaymentDifficulty() MedicationPaymentDifficulty {
	if x != nil {
		return x.MedicationPaymentDifficulty
	}
	return MedicationPaymentDifficulty_MEDICATION_PAYMENT_DIFFICULTY_NOT_SPECIFIED
}

var File_heyrenee_v1_messages_patient_health_questionnaire_proto protoreflect.FileDescriptor

var file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDesc = []byte{
	0x0a, 0x37, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x68, 0x65, 0x79, 0x72, 0x65,
	0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x1e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8a, 0x0f, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x16, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x15, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1c, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x57,
	0x65, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x19, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x6e, 0x65,
	0x73, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a,
	0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x6c,
	0x6c, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x57, 0x65,
	0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x10, 0x6d, 0x61, 0x6d, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x79, 0x72,
	0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x6d, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x6d, 0x61, 0x6d, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6d, 0x6d, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x61, 0x6d, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x79, 0x0a,
	0x1f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1c, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x7c, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68,
	0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1e,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67,
	0x0a, 0x19, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x75, 0x5f, 0x76, 0x61, 0x63,
	0x63, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x46,
	0x6c, 0x75, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x16, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x6c, 0x75, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x75, 0x5f, 0x76, 0x61, 0x63, 0x63, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x6c, 0x75, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x70, 0x6e, 0x65, 0x75, 0x6d, 0x6f, 0x63, 0x6f, 0x63,
	0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65,
	0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x6e, 0x65, 0x75, 0x6d, 0x6f, 0x63, 0x6f, 0x63, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x63, 0x63,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x70, 0x6e, 0x65, 0x75, 0x6d,
	0x6f, 0x63, 0x6f, 0x63, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x5f, 0x76, 0x61,
	0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x56,
	0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x63, 0x6f,
	0x76, 0x69, 0x64, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x51, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x5f, 0x76,
	0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x69, 0x6c, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x65,
	0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x19, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x1b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x70, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68,
	0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x70, 0x61, 0x79, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x19, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x61, 0x79, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x75, 0x0a, 0x1d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x52, 0x1b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x2a,
	0xa5, 0x01, 0x0a, 0x19, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x57, 0x65, 0x6c, 0x6c, 0x6e, 0x65,
	0x73, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x28, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x41,
	0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x56,
	0x49, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x4e, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x0f, 0x4d, 0x61, 0x6d, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x4d, 0x4d, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x41, 0x4d, 0x4d, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x41, 0x4d, 0x4d, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0xb1, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x45, 0x43, 0x54, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x45, 0x43, 0x54, 0x41, 0x4c,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x45, 0x43, 0x54, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0xce, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x45, 0x43, 0x54, 0x41,
	0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x45, 0x43, 0x54, 0x41, 0x4c,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x54, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x45, 0x43, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x47,
	0x55, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x45,
	0x43, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x4e, 0x4f, 0x53, 0x43,
	0x4f, 0x50, 0x59, 0x10, 0x03, 0x2a, 0x99, 0x01, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x46, 0x6c, 0x75, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x25, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x5f, 0x56,
	0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x5f, 0x56, 0x41, 0x43, 0x43, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46,
	0x4c, 0x55, 0x5f, 0x56, 0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0xcc, 0x01, 0x0a, 0x19, 0x50, 0x6e, 0x65, 0x75, 0x6d, 0x6f, 0x63, 0x6f, 0x63, 0x63,
	0x61, 0x6c, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x27, 0x50, 0x4e, 0x45, 0x55, 0x4d, 0x4f, 0x43, 0x4f, 0x43, 0x43, 0x41, 0x4c, 0x5f,
	0x56, 0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x50, 0x4e, 0x45, 0x55, 0x4d, 0x4f, 0x43, 0x4f, 0x43, 0x43, 0x41, 0x4c, 0x5f, 0x56, 0x41, 0x43,
	0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4e, 0x45, 0x55, 0x4d,
	0x4f, 0x43, 0x4f, 0x43, 0x43, 0x41, 0x4c, 0x5f, 0x56, 0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4e, 0x45, 0x55, 0x4d, 0x4f, 0x43, 0x4f, 0x43, 0x43, 0x41,
	0x4c, 0x5f, 0x56, 0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x56, 0x49, 0x44,
	0x5f, 0x56, 0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x56, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x43, 0x43, 0x49, 0x4e, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x56, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x43, 0x43, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x0f, 0x50, 0x69, 0x6c,
	0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x02, 0x2a, 0xa9, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x29, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x01, 0x12, 0x2d,
	0x0a, 0x29, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f,
	0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x02, 0x2a, 0xa9, 0x01,
	0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x61,
	0x79, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x29, 0x4d,
	0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x59, 0x5f,
	0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x59, 0x5f, 0x44,
	0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x41, 0x59, 0x5f, 0x44,
	0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x46,
	0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x02, 0x2a, 0xbc, 0x01, 0x0a, 0x1b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x37, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x53, 0x5f, 0x42, 0x45, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x41,
	0x46, 0x46, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x46, 0x46,
	0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x02, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x65, 0x79, 0x52, 0x65, 0x6e, 0x65, 0x65, 0x49,
	0x6e, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescOnce sync.Once
	file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescData = file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDesc
)

func file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescGZIP() []byte {
	file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescOnce.Do(func() {
		file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescData)
	})
	return file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDescData
}

var file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_heyrenee_v1_messages_patient_health_questionnaire_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_heyrenee_v1_messages_patient_health_questionnaire_proto_goTypes = []interface{}{
	(AnnualWellnessVisitStatus)(0),     // 0: heyrenee.v1.messages.AnnualWellnessVisitStatus
	(MammogramStatus)(0),               // 1: heyrenee.v1.messages.MammogramStatus
	(ColorectalCancerScreenStatus)(0),  // 2: heyrenee.v1.messages.ColorectalCancerScreenStatus
	(ColorectalCancerScreenType)(0),    // 3: heyrenee.v1.messages.ColorectalCancerScreenType
	(AnnualFluVaccineStatus)(0),        // 4: heyrenee.v1.messages.AnnualFluVaccineStatus
	(PneumococcalVaccineStatus)(0),     // 5: heyrenee.v1.messages.PneumococcalVaccineStatus
	(CovidVaccineStatus)(0),            // 6: heyrenee.v1.messages.CovidVaccineStatus
	(PillSystemUsage)(0),               // 7: heyrenee.v1.messages.PillSystemUsage
	(DailyMedicationDifficulty)(0),     // 8: heyrenee.v1.messages.DailyMedicationDifficulty
	(MedicationCopayDifficulty)(0),     // 9: heyrenee.v1.messages.MedicationCopayDifficulty
	(MedicationPaymentDifficulty)(0),   // 10: heyrenee.v1.messages.MedicationPaymentDifficulty
	(*PatientHealthQuestionnaire)(nil), // 11: heyrenee.v1.messages.PatientHealthQuestionnaire
	(enums.Language)(0),                // 12: heyrenee.v1.enums.Language
	(*timestamppb.Timestamp)(nil),      // 13: google.protobuf.Timestamp
}
var file_heyrenee_v1_messages_patient_health_questionnaire_proto_depIdxs = []int32{
	12, // 0: heyrenee.v1.messages.PatientHealthQuestionnaire.questionnaire_language:type_name -> heyrenee.v1.enums.Language
	13, // 1: heyrenee.v1.messages.PatientHealthQuestionnaire.date_time_answered:type_name -> google.protobuf.Timestamp
	0,  // 2: heyrenee.v1.messages.PatientHealthQuestionnaire.annual_wellness_visit_status:type_name -> heyrenee.v1.messages.AnnualWellnessVisitStatus
	13, // 3: heyrenee.v1.messages.PatientHealthQuestionnaire.last_annual_wellness_visit_date:type_name -> google.protobuf.Timestamp
	1,  // 4: heyrenee.v1.messages.PatientHealthQuestionnaire.mammogram_status:type_name -> heyrenee.v1.messages.MammogramStatus
	13, // 5: heyrenee.v1.messages.PatientHealthQuestionnaire.last_mammogram_date:type_name -> google.protobuf.Timestamp
	2,  // 6: heyrenee.v1.messages.PatientHealthQuestionnaire.colorectal_cancer_screen_status:type_name -> heyrenee.v1.messages.ColorectalCancerScreenStatus
	13, // 7: heyrenee.v1.messages.PatientHealthQuestionnaire.last_colorectal_cancer_screen_date:type_name -> google.protobuf.Timestamp
	3,  // 8: heyrenee.v1.messages.PatientHealthQuestionnaire.last_colorectal_cancer_screen_type:type_name -> heyrenee.v1.messages.ColorectalCancerScreenType
	4,  // 9: heyrenee.v1.messages.PatientHealthQuestionnaire.annual_flu_vaccine_status:type_name -> heyrenee.v1.messages.AnnualFluVaccineStatus
	13, // 10: heyrenee.v1.messages.PatientHealthQuestionnaire.last_annual_flu_vaccine_date:type_name -> google.protobuf.Timestamp
	5,  // 11: heyrenee.v1.messages.PatientHealthQuestionnaire.pneumococcal_vaccine_status:type_name -> heyrenee.v1.messages.PneumococcalVaccineStatus
	6,  // 12: heyrenee.v1.messages.PatientHealthQuestionnaire.covid_vaccine_status:type_name -> heyrenee.v1.messages.CovidVaccineStatus
	13, // 13: heyrenee.v1.messages.PatientHealthQuestionnaire.last_covid_vaccine_date:type_name -> google.protobuf.Timestamp
	7,  // 14: heyrenee.v1.messages.PatientHealthQuestionnaire.pill_system_usage:type_name -> heyrenee.v1.messages.PillSystemUsage
	8,  // 15: heyrenee.v1.messages.PatientHealthQuestionnaire.daily_medication_difficulty:type_name -> heyrenee.v1.messages.DailyMedicationDifficulty
	9,  // 16: heyrenee.v1.messages.PatientHealthQuestionnaire.medication_copay_difficulty:type_name -> heyrenee.v1.messages.MedicationCopayDifficulty
	10, // 17: heyrenee.v1.messages.PatientHealthQuestionnaire.medication_payment_difficulty:type_name -> heyrenee.v1.messages.MedicationPaymentDifficulty
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_heyrenee_v1_messages_patient_health_questionnaire_proto_init() }
func file_heyrenee_v1_messages_patient_health_questionnaire_proto_init() {
	if File_heyrenee_v1_messages_patient_health_questionnaire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heyrenee_v1_messages_patient_health_questionnaire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientHealthQuestionnaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_heyrenee_v1_messages_patient_health_questionnaire_proto_goTypes,
		DependencyIndexes: file_heyrenee_v1_messages_patient_health_questionnaire_proto_depIdxs,
		EnumInfos:         file_heyrenee_v1_messages_patient_health_questionnaire_proto_enumTypes,
		MessageInfos:      file_heyrenee_v1_messages_patient_health_questionnaire_proto_msgTypes,
	}.Build()
	File_heyrenee_v1_messages_patient_health_questionnaire_proto = out.File
	file_heyrenee_v1_messages_patient_health_questionnaire_proto_rawDesc = nil
	file_heyrenee_v1_messages_patient_health_questionnaire_proto_goTypes = nil
	file_heyrenee_v1_messages_patient_health_questionnaire_proto_depIdxs = nil
}
