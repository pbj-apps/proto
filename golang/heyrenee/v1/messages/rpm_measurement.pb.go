// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: heyrenee/v1/messages/rpm_measurement.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpmMeasurementResultUnit int32

const (
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_UNSPECIFIED RpmMeasurementResultUnit = 0
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_BPM         RpmMeasurementResultUnit = 1
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_LBS         RpmMeasurementResultUnit = 2
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_PERCENTAGE  RpmMeasurementResultUnit = 3
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_MG_DL       RpmMeasurementResultUnit = 4
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_MM_HG       RpmMeasurementResultUnit = 5
	RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_CELSIUS     RpmMeasurementResultUnit = 6
)

// Enum value maps for RpmMeasurementResultUnit.
var (
	RpmMeasurementResultUnit_name = map[int32]string{
		0: "RPM_MEASUREMENT_RESULT_UNIT_UNSPECIFIED",
		1: "RPM_MEASUREMENT_RESULT_UNIT_BPM",
		2: "RPM_MEASUREMENT_RESULT_UNIT_LBS",
		3: "RPM_MEASUREMENT_RESULT_UNIT_PERCENTAGE",
		4: "RPM_MEASUREMENT_RESULT_UNIT_MG_DL",
		5: "RPM_MEASUREMENT_RESULT_UNIT_MM_HG",
		6: "RPM_MEASUREMENT_RESULT_UNIT_CELSIUS",
	}
	RpmMeasurementResultUnit_value = map[string]int32{
		"RPM_MEASUREMENT_RESULT_UNIT_UNSPECIFIED": 0,
		"RPM_MEASUREMENT_RESULT_UNIT_BPM":         1,
		"RPM_MEASUREMENT_RESULT_UNIT_LBS":         2,
		"RPM_MEASUREMENT_RESULT_UNIT_PERCENTAGE":  3,
		"RPM_MEASUREMENT_RESULT_UNIT_MG_DL":       4,
		"RPM_MEASUREMENT_RESULT_UNIT_MM_HG":       5,
		"RPM_MEASUREMENT_RESULT_UNIT_CELSIUS":     6,
	}
)

func (x RpmMeasurementResultUnit) Enum() *RpmMeasurementResultUnit {
	p := new(RpmMeasurementResultUnit)
	*p = x
	return p
}

func (x RpmMeasurementResultUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpmMeasurementResultUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_rpm_measurement_proto_enumTypes[0].Descriptor()
}

func (RpmMeasurementResultUnit) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_rpm_measurement_proto_enumTypes[0]
}

func (x RpmMeasurementResultUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpmMeasurementResultUnit.Descriptor instead.
func (RpmMeasurementResultUnit) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_measurement_proto_rawDescGZIP(), []int{0}
}

type RpmMeasurementResultType int32

const (
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_UNSPECIFIED RpmMeasurementResultType = 0
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_WEIGHT      RpmMeasurementResultType = 1
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_SPO2        RpmMeasurementResultType = 2
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_BPM         RpmMeasurementResultType = 3
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_GLUCOSE     RpmMeasurementResultType = 4
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_DIA         RpmMeasurementResultType = 5
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_SYS         RpmMeasurementResultType = 6
	RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_TEMP        RpmMeasurementResultType = 7
)

// Enum value maps for RpmMeasurementResultType.
var (
	RpmMeasurementResultType_name = map[int32]string{
		0: "RPM_MEASUREMENT_RESULT_TYPE_UNSPECIFIED",
		1: "RPM_MEASUREMENT_RESULT_TYPE_WEIGHT",
		2: "RPM_MEASUREMENT_RESULT_TYPE_SPO2",
		3: "RPM_MEASUREMENT_RESULT_TYPE_BPM",
		4: "RPM_MEASUREMENT_RESULT_TYPE_GLUCOSE",
		5: "RPM_MEASUREMENT_RESULT_TYPE_DIA",
		6: "RPM_MEASUREMENT_RESULT_TYPE_SYS",
		7: "RPM_MEASUREMENT_RESULT_TYPE_TEMP",
	}
	RpmMeasurementResultType_value = map[string]int32{
		"RPM_MEASUREMENT_RESULT_TYPE_UNSPECIFIED": 0,
		"RPM_MEASUREMENT_RESULT_TYPE_WEIGHT":      1,
		"RPM_MEASUREMENT_RESULT_TYPE_SPO2":        2,
		"RPM_MEASUREMENT_RESULT_TYPE_BPM":         3,
		"RPM_MEASUREMENT_RESULT_TYPE_GLUCOSE":     4,
		"RPM_MEASUREMENT_RESULT_TYPE_DIA":         5,
		"RPM_MEASUREMENT_RESULT_TYPE_SYS":         6,
		"RPM_MEASUREMENT_RESULT_TYPE_TEMP":        7,
	}
)

func (x RpmMeasurementResultType) Enum() *RpmMeasurementResultType {
	p := new(RpmMeasurementResultType)
	*p = x
	return p
}

func (x RpmMeasurementResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpmMeasurementResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_heyrenee_v1_messages_rpm_measurement_proto_enumTypes[1].Descriptor()
}

func (RpmMeasurementResultType) Type() protoreflect.EnumType {
	return &file_heyrenee_v1_messages_rpm_measurement_proto_enumTypes[1]
}

func (x RpmMeasurementResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpmMeasurementResultType.Descriptor instead.
func (RpmMeasurementResultType) EnumDescriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_measurement_proto_rawDescGZIP(), []int{1}
}

type RpmMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PatientId             string                  `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	RpmScheduleId         string                  `protobuf:"bytes,3,opt,name=rpm_schedule_id,json=rpmScheduleId,proto3" json:"rpm_schedule_id,omitempty"`
	RpmMeasurementId      string                  `protobuf:"bytes,4,opt,name=rpm_measurement_id,json=rpmMeasurementId,proto3" json:"rpm_measurement_id,omitempty"`
	RpmMeasurementResults []*RpmMeasurementResult `protobuf:"bytes,5,rep,name=rpm_measurement_results,json=rpmMeasurementResults,proto3" json:"rpm_measurement_results,omitempty"`
	TimeTaken             *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=time_taken,json=timeTaken,proto3" json:"time_taken,omitempty"`
}

func (x *RpmMeasurement) Reset() {
	*x = RpmMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpmMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpmMeasurement) ProtoMessage() {}

func (x *RpmMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpmMeasurement.ProtoReflect.Descriptor instead.
func (*RpmMeasurement) Descriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_measurement_proto_rawDescGZIP(), []int{0}
}

func (x *RpmMeasurement) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RpmMeasurement) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *RpmMeasurement) GetRpmScheduleId() string {
	if x != nil {
		return x.RpmScheduleId
	}
	return ""
}

func (x *RpmMeasurement) GetRpmMeasurementId() string {
	if x != nil {
		return x.RpmMeasurementId
	}
	return ""
}

func (x *RpmMeasurement) GetRpmMeasurementResults() []*RpmMeasurementResult {
	if x != nil {
		return x.RpmMeasurementResults
	}
	return nil
}

func (x *RpmMeasurement) GetTimeTaken() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTaken
	}
	return nil
}

type RpmMeasurementResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpmMeasurementResultId   string                   `protobuf:"bytes,1,opt,name=rpm_measurement_result_id,json=rpmMeasurementResultId,proto3" json:"rpm_measurement_result_id,omitempty"`
	Value                    float64                  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	RpmMeasurementResultUnit RpmMeasurementResultUnit `protobuf:"varint,3,opt,name=rpm_measurement_result_unit,json=rpmMeasurementResultUnit,proto3,enum=heyrenee.v1.messages.RpmMeasurementResultUnit" json:"rpm_measurement_result_unit,omitempty"`
	RpmMeasurementResultType RpmMeasurementResultType `protobuf:"varint,4,opt,name=rpm_measurement_result_type,json=rpmMeasurementResultType,proto3,enum=heyrenee.v1.messages.RpmMeasurementResultType" json:"rpm_measurement_result_type,omitempty"`
}

func (x *RpmMeasurementResult) Reset() {
	*x = RpmMeasurementResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpmMeasurementResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpmMeasurementResult) ProtoMessage() {}

func (x *RpmMeasurementResult) ProtoReflect() protoreflect.Message {
	mi := &file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpmMeasurementResult.ProtoReflect.Descriptor instead.
func (*RpmMeasurementResult) Descriptor() ([]byte, []int) {
	return file_heyrenee_v1_messages_rpm_measurement_proto_rawDescGZIP(), []int{1}
}

func (x *RpmMeasurementResult) GetRpmMeasurementResultId() string {
	if x != nil {
		return x.RpmMeasurementResultId
	}
	return ""
}

func (x *RpmMeasurementResult) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RpmMeasurementResult) GetRpmMeasurementResultUnit() RpmMeasurementResultUnit {
	if x != nil {
		return x.RpmMeasurementResultUnit
	}
	return RpmMeasurementResultUnit_RPM_MEASUREMENT_RESULT_UNIT_UNSPECIFIED
}

func (x *RpmMeasurementResult) GetRpmMeasurementResultType() RpmMeasurementResultType {
	if x != nil {
		return x.RpmMeasurementResultType
	}
	return RpmMeasurementResultType_RPM_MEASUREMENT_RESULT_TYPE_UNSPECIFIED
}

var File_heyrenee_v1_messages_rpm_measurement_proto protoreflect.FileDescriptor

var file_heyrenee_v1_messages_rpm_measurement_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x68, 0x65,
	0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x02, 0x0a, 0x0e, 0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x70, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x70, 0x6d, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x17, 0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x70, 0x6d,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x15, 0x72, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x22, 0xc5, 0x02, 0x0a, 0x14, 0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x19,
	0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d, 0x0a,
	0x1b, 0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x18, 0x72, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x6d, 0x0a, 0x1b,
	0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x18, 0x72, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xb4, 0x02, 0x0a, 0x18,
	0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x50, 0x4d, 0x5f,
	0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x50, 0x4d, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x50,
	0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x42, 0x53, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x52,
	0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x47, 0x5f, 0x44, 0x4c,
	0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4d, 0x4d, 0x5f, 0x48, 0x47, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x50, 0x4d,
	0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x45, 0x4c, 0x53, 0x49, 0x55, 0x53,
	0x10, 0x06, 0x2a, 0xd3, 0x02, 0x0a, 0x18, 0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x27, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x32, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x50,
	0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x50, 0x4d, 0x10, 0x03, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x4c, 0x55, 0x43, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x50, 0x4d, 0x5f,
	0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x50, 0x4d, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x07, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x65, 0x79, 0x52, 0x65, 0x6e, 0x65, 0x65, 0x49,
	0x6e, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x68, 0x65, 0x79, 0x72, 0x65, 0x6e, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_heyrenee_v1_messages_rpm_measurement_proto_rawDescOnce sync.Once
	file_heyrenee_v1_messages_rpm_measurement_proto_rawDescData = file_heyrenee_v1_messages_rpm_measurement_proto_rawDesc
)

func file_heyrenee_v1_messages_rpm_measurement_proto_rawDescGZIP() []byte {
	file_heyrenee_v1_messages_rpm_measurement_proto_rawDescOnce.Do(func() {
		file_heyrenee_v1_messages_rpm_measurement_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyrenee_v1_messages_rpm_measurement_proto_rawDescData)
	})
	return file_heyrenee_v1_messages_rpm_measurement_proto_rawDescData
}

var file_heyrenee_v1_messages_rpm_measurement_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_heyrenee_v1_messages_rpm_measurement_proto_goTypes = []interface{}{
	(RpmMeasurementResultUnit)(0), // 0: heyrenee.v1.messages.RpmMeasurementResultUnit
	(RpmMeasurementResultType)(0), // 1: heyrenee.v1.messages.RpmMeasurementResultType
	(*RpmMeasurement)(nil),        // 2: heyrenee.v1.messages.RpmMeasurement
	(*RpmMeasurementResult)(nil),  // 3: heyrenee.v1.messages.RpmMeasurementResult
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_heyrenee_v1_messages_rpm_measurement_proto_depIdxs = []int32{
	3, // 0: heyrenee.v1.messages.RpmMeasurement.rpm_measurement_results:type_name -> heyrenee.v1.messages.RpmMeasurementResult
	4, // 1: heyrenee.v1.messages.RpmMeasurement.time_taken:type_name -> google.protobuf.Timestamp
	0, // 2: heyrenee.v1.messages.RpmMeasurementResult.rpm_measurement_result_unit:type_name -> heyrenee.v1.messages.RpmMeasurementResultUnit
	1, // 3: heyrenee.v1.messages.RpmMeasurementResult.rpm_measurement_result_type:type_name -> heyrenee.v1.messages.RpmMeasurementResultType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_heyrenee_v1_messages_rpm_measurement_proto_init() }
func file_heyrenee_v1_messages_rpm_measurement_proto_init() {
	if File_heyrenee_v1_messages_rpm_measurement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpmMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpmMeasurementResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyrenee_v1_messages_rpm_measurement_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_heyrenee_v1_messages_rpm_measurement_proto_goTypes,
		DependencyIndexes: file_heyrenee_v1_messages_rpm_measurement_proto_depIdxs,
		EnumInfos:         file_heyrenee_v1_messages_rpm_measurement_proto_enumTypes,
		MessageInfos:      file_heyrenee_v1_messages_rpm_measurement_proto_msgTypes,
	}.Build()
	File_heyrenee_v1_messages_rpm_measurement_proto = out.File
	file_heyrenee_v1_messages_rpm_measurement_proto_rawDesc = nil
	file_heyrenee_v1_messages_rpm_measurement_proto_goTypes = nil
	file_heyrenee_v1_messages_rpm_measurement_proto_depIdxs = nil
}
