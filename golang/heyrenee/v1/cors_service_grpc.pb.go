// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CorsServiceClient is the client API for CorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CorsServiceClient interface {
	CorsPreflight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type corsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCorsServiceClient(cc grpc.ClientConnInterface) CorsServiceClient {
	return &corsServiceClient{cc}
}

func (c *corsServiceClient) CorsPreflight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/heyrenee.v1.CorsService/CorsPreflight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CorsServiceServer is the server API for CorsService service.
// All implementations must embed UnimplementedCorsServiceServer
// for forward compatibility
type CorsServiceServer interface {
	CorsPreflight(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCorsServiceServer()
}

// UnimplementedCorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCorsServiceServer struct {
}

func (UnimplementedCorsServiceServer) CorsPreflight(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorsPreflight not implemented")
}
func (UnimplementedCorsServiceServer) mustEmbedUnimplementedCorsServiceServer() {}

// UnsafeCorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CorsServiceServer will
// result in compilation errors.
type UnsafeCorsServiceServer interface {
	mustEmbedUnimplementedCorsServiceServer()
}

func RegisterCorsServiceServer(s grpc.ServiceRegistrar, srv CorsServiceServer) {
	s.RegisterService(&CorsService_ServiceDesc, srv)
}

func _CorsService_CorsPreflight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorsServiceServer).CorsPreflight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyrenee.v1.CorsService/CorsPreflight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorsServiceServer).CorsPreflight(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CorsService_ServiceDesc is the grpc.ServiceDesc for CorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heyrenee.v1.CorsService",
	HandlerType: (*CorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CorsPreflight",
			Handler:    _CorsService_CorsPreflight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heyrenee/v1/cors_service.proto",
}
